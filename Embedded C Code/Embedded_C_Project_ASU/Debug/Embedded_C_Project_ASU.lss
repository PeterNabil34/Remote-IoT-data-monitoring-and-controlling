
Embedded_C_Project_ASU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003a6  00800100  000011bc  00001250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  008004a6  008004a6  000015f6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001af9  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6c  00000000  00000000  000032dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c97  00000000  00000000  00003f49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  00004be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062d  00000000  00000000  00004f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001015  00000000  00000000  000055a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000065be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	14 e0       	ldi	r17, 0x04	; 4
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec eb       	ldi	r30, 0xBC	; 188
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3a       	cpi	r26, 0xA6	; 166
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	a6 ea       	ldi	r26, 0xA6	; 166
      8e:	b4 e0       	ldi	r27, 0x04	; 4
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 3b       	cpi	r26, 0xBA	; 186
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <main>
      9e:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Adc_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Adc_init(void)
{
	ADMUX=0;
      a6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
      aa:	ea e7       	ldi	r30, 0x7A	; 122
      ac:	f0 e0       	ldi	r31, 0x00	; 0
      ae:	80 81       	ld	r24, Z
      b0:	87 68       	ori	r24, 0x87	; 135
      b2:	80 83       	st	Z, r24
      b4:	08 95       	ret

000000b6 <Adc_readChannel>:
}


unsigned short Adc_readChannel(unsigned char Analog_Pin_Number)
{
	ADMUX=(ADMUX&0xE0)|(Analog_Pin_Number&0x07);
      b6:	ec e7       	ldi	r30, 0x7C	; 124
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	90 81       	ld	r25, Z
      bc:	90 7e       	andi	r25, 0xE0	; 224
      be:	87 70       	andi	r24, 0x07	; 7
      c0:	89 2b       	or	r24, r25
      c2:	80 83       	st	Z, r24
	SIT_BIT(ADCSRA,ADSC);	    	//start conversion
      c4:	ea e7       	ldi	r30, 0x7A	; 122
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	80 81       	ld	r24, Z
      ca:	80 64       	ori	r24, 0x40	; 64
      cc:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF));
      ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
      d2:	84 ff       	sbrs	r24, 4
      d4:	fc cf       	rjmp	.-8      	; 0xce <Adc_readChannel+0x18>
	SIT_BIT(ADCSRA,ADIF);		   //clear ADIF flag by writing a logical one to it 
      d6:	ea e7       	ldi	r30, 0x7A	; 122
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 61       	ori	r24, 0x10	; 16
      de:	80 83       	st	Z, r24
	
	return ADC;
      e0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
      e4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
}
      e8:	08 95       	ret

000000ea <LCD_sendcommand>:
}


void LCD_sendcommand(unsigned char command)
{
	CLEAR_BIT(LCD_CTRL_PORT,RS);
      ea:	95 b1       	in	r25, 0x05	; 5
      ec:	9e 7f       	andi	r25, 0xFE	; 254
      ee:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f0:	ef e9       	ldi	r30, 0x9F	; 159
      f2:	ff e0       	ldi	r31, 0x0F	; 15
      f4:	31 97       	sbiw	r30, 0x01	; 1
      f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_sendcommand+0xa>
      f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_sendcommand+0x10>
      fa:	00 00       	nop
	_delay_ms(1);
	SIT_BIT(LCD_CTRL_PORT,EN);
      fc:	95 b1       	in	r25, 0x05	; 5
      fe:	92 60       	ori	r25, 0x02	; 2
     100:	95 b9       	out	0x05, r25	; 5
     102:	ef e9       	ldi	r30, 0x9F	; 159
     104:	ff e0       	ldi	r31, 0x0F	; 15
     106:	31 97       	sbiw	r30, 0x01	; 1
     108:	f1 f7       	brne	.-4      	; 0x106 <LCD_sendcommand+0x1c>
     10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_sendcommand+0x22>
     10c:	00 00       	nop
	_delay_ms(1);
	
	#ifdef Upper_Four_bit_mode
		LCD_DATA_PORT=(command&0xF0)|(LCD_DATA_PORT&0x0F);
     10e:	9b b1       	in	r25, 0x0b	; 11
     110:	28 2f       	mov	r18, r24
     112:	20 7f       	andi	r18, 0xF0	; 240
     114:	9f 70       	andi	r25, 0x0F	; 15
     116:	92 2b       	or	r25, r18
     118:	9b b9       	out	0x0b, r25	; 11
     11a:	ef e9       	ldi	r30, 0x9F	; 159
     11c:	ff e0       	ldi	r31, 0x0F	; 15
     11e:	31 97       	sbiw	r30, 0x01	; 1
     120:	f1 f7       	brne	.-4      	; 0x11e <LCD_sendcommand+0x34>
     122:	00 c0       	rjmp	.+0      	; 0x124 <LCD_sendcommand+0x3a>
     124:	00 00       	nop
		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT,EN);
     126:	95 b1       	in	r25, 0x05	; 5
     128:	9d 7f       	andi	r25, 0xFD	; 253
     12a:	95 b9       	out	0x05, r25	; 5
     12c:	ef e9       	ldi	r30, 0x9F	; 159
     12e:	ff e0       	ldi	r31, 0x0F	; 15
     130:	31 97       	sbiw	r30, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <LCD_sendcommand+0x46>
     134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_sendcommand+0x4c>
     136:	00 00       	nop
		_delay_ms(1);
		SIT_BIT(LCD_CTRL_PORT,EN);
     138:	95 b1       	in	r25, 0x05	; 5
     13a:	92 60       	ori	r25, 0x02	; 2
     13c:	95 b9       	out	0x05, r25	; 5
     13e:	ef e9       	ldi	r30, 0x9F	; 159
     140:	ff e0       	ldi	r31, 0x0F	; 15
     142:	31 97       	sbiw	r30, 0x01	; 1
     144:	f1 f7       	brne	.-4      	; 0x142 <LCD_sendcommand+0x58>
     146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_sendcommand+0x5e>
     148:	00 00       	nop
		_delay_ms(1);
		LCD_DATA_PORT=((command&0x0F)<<4)|(LCD_DATA_PORT&0x0F);
     14a:	f0 e1       	ldi	r31, 0x10	; 16
     14c:	8f 9f       	mul	r24, r31
     14e:	c0 01       	movw	r24, r0
     150:	11 24       	eor	r1, r1
     152:	9b b1       	in	r25, 0x0b	; 11
     154:	9f 70       	andi	r25, 0x0F	; 15
     156:	89 2b       	or	r24, r25
     158:	8b b9       	out	0x0b, r24	; 11
     15a:	8f e9       	ldi	r24, 0x9F	; 159
     15c:	9f e0       	ldi	r25, 0x0F	; 15
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	f1 f7       	brne	.-4      	; 0x15e <LCD_sendcommand+0x74>
     162:	00 c0       	rjmp	.+0      	; 0x164 <LCD_sendcommand+0x7a>
     164:	00 00       	nop
	#endif
	
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,EN);
     166:	85 b1       	in	r24, 0x05	; 5
     168:	8d 7f       	andi	r24, 0xFD	; 253
     16a:	85 b9       	out	0x05, r24	; 5
     16c:	ef e9       	ldi	r30, 0x9F	; 159
     16e:	ff e0       	ldi	r31, 0x0F	; 15
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <LCD_sendcommand+0x86>
     174:	00 c0       	rjmp	.+0      	; 0x176 <LCD_sendcommand+0x8c>
     176:	00 00       	nop
     178:	08 95       	ret

0000017a <LCD_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

void LCD_init(void)
{
	LCD_CTRL_PORT_DIR|=(1<<RS)|(1<<EN);       //configure control pins as output
     17a:	84 b1       	in	r24, 0x04	; 4
     17c:	83 60       	ori	r24, 0x03	; 3
     17e:	84 b9       	out	0x04, r24	; 4
	LCD_DATA_PORT_DIR=0xf0;							 //configure data Port as output
     180:	80 ef       	ldi	r24, 0xF0	; 240
     182:	8a b9       	out	0x0a, r24	; 10
	LCD_sendcommand(FOUR_BITS_DATA_MODE);
     184:	82 e0       	ldi	r24, 0x02	; 2
     186:	0e 94 75 00 	call	0xea	; 0xea <LCD_sendcommand>
	LCD_sendcommand(TWO_LINE_LCD_FOUR_BIT_MODE);		
     18a:	80 e4       	ldi	r24, 0x40	; 64
     18c:	0e 94 75 00 	call	0xea	; 0xea <LCD_sendcommand>
	LCD_sendcommand(CURSOR_OFF);
     190:	8c e0       	ldi	r24, 0x0C	; 12
     192:	0e 94 75 00 	call	0xea	; 0xea <LCD_sendcommand>
	LCD_sendcommand(CLEAR_COMMAND);
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	0e 94 75 00 	call	0xea	; 0xea <LCD_sendcommand>
     19c:	08 95       	ret

0000019e <LCD_displayCharacter>:
}


void LCD_displayCharacter(unsigned char data)
{
		SIT_BIT(LCD_CTRL_PORT,RS);
     19e:	95 b1       	in	r25, 0x05	; 5
     1a0:	91 60       	ori	r25, 0x01	; 1
     1a2:	95 b9       	out	0x05, r25	; 5
     1a4:	ef e9       	ldi	r30, 0x9F	; 159
     1a6:	ff e0       	ldi	r31, 0x0F	; 15
     1a8:	31 97       	sbiw	r30, 0x01	; 1
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCD_displayCharacter+0xa>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_displayCharacter+0x10>
     1ae:	00 00       	nop
		_delay_ms(1);
		SIT_BIT(LCD_CTRL_PORT,EN);
     1b0:	95 b1       	in	r25, 0x05	; 5
     1b2:	92 60       	ori	r25, 0x02	; 2
     1b4:	95 b9       	out	0x05, r25	; 5
     1b6:	ef e9       	ldi	r30, 0x9F	; 159
     1b8:	ff e0       	ldi	r31, 0x0F	; 15
     1ba:	31 97       	sbiw	r30, 0x01	; 1
     1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCD_displayCharacter+0x1c>
     1be:	00 c0       	rjmp	.+0      	; 0x1c0 <LCD_displayCharacter+0x22>
     1c0:	00 00       	nop
		_delay_ms(1);
		
		#ifdef Upper_Four_bit_mode
		LCD_DATA_PORT=(data&0xF0)|(LCD_DATA_PORT&0x0F);
     1c2:	9b b1       	in	r25, 0x0b	; 11
     1c4:	28 2f       	mov	r18, r24
     1c6:	20 7f       	andi	r18, 0xF0	; 240
     1c8:	9f 70       	andi	r25, 0x0F	; 15
     1ca:	92 2b       	or	r25, r18
     1cc:	9b b9       	out	0x0b, r25	; 11
     1ce:	ef e9       	ldi	r30, 0x9F	; 159
     1d0:	ff e0       	ldi	r31, 0x0F	; 15
     1d2:	31 97       	sbiw	r30, 0x01	; 1
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD_displayCharacter+0x34>
     1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCD_displayCharacter+0x3a>
     1d8:	00 00       	nop
		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT,EN);
     1da:	95 b1       	in	r25, 0x05	; 5
     1dc:	9d 7f       	andi	r25, 0xFD	; 253
     1de:	95 b9       	out	0x05, r25	; 5
     1e0:	ef e9       	ldi	r30, 0x9F	; 159
     1e2:	ff e0       	ldi	r31, 0x0F	; 15
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCD_displayCharacter+0x46>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <LCD_displayCharacter+0x4c>
     1ea:	00 00       	nop
		_delay_ms(1);
		SIT_BIT(LCD_CTRL_PORT,EN);
     1ec:	95 b1       	in	r25, 0x05	; 5
     1ee:	92 60       	ori	r25, 0x02	; 2
     1f0:	95 b9       	out	0x05, r25	; 5
     1f2:	ef e9       	ldi	r30, 0x9F	; 159
     1f4:	ff e0       	ldi	r31, 0x0F	; 15
     1f6:	31 97       	sbiw	r30, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <LCD_displayCharacter+0x58>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <LCD_displayCharacter+0x5e>
     1fc:	00 00       	nop
		_delay_ms(1);
		LCD_DATA_PORT=((data&0x0F)<<4)|(LCD_DATA_PORT&0x0F);
     1fe:	f0 e1       	ldi	r31, 0x10	; 16
     200:	8f 9f       	mul	r24, r31
     202:	c0 01       	movw	r24, r0
     204:	11 24       	eor	r1, r1
     206:	9b b1       	in	r25, 0x0b	; 11
     208:	9f 70       	andi	r25, 0x0F	; 15
     20a:	89 2b       	or	r24, r25
     20c:	8b b9       	out	0x0b, r24	; 11
     20e:	8f e9       	ldi	r24, 0x9F	; 159
     210:	9f e0       	ldi	r25, 0x0F	; 15
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <LCD_displayCharacter+0x74>
     216:	00 c0       	rjmp	.+0      	; 0x218 <LCD_displayCharacter+0x7a>
     218:	00 00       	nop
		#endif
		
		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT,EN);
     21a:	85 b1       	in	r24, 0x05	; 5
     21c:	8d 7f       	andi	r24, 0xFD	; 253
     21e:	85 b9       	out	0x05, r24	; 5
     220:	ef e9       	ldi	r30, 0x9F	; 159
     222:	ff e0       	ldi	r31, 0x0F	; 15
     224:	31 97       	sbiw	r30, 0x01	; 1
     226:	f1 f7       	brne	.-4      	; 0x224 <LCD_displayCharacter+0x86>
     228:	00 c0       	rjmp	.+0      	; 0x22a <LCD_displayCharacter+0x8c>
     22a:	00 00       	nop
     22c:	08 95       	ret

0000022e <LCD_DisplayString>:
		_delay_ms(1);
}

void LCD_DisplayString(char *str)
{
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	8c 01       	movw	r16, r24
		
	for(unsigned short i=0;str[i]!='\0';i++)
     238:	c0 e0       	ldi	r28, 0x00	; 0
     23a:	d0 e0       	ldi	r29, 0x00	; 0
     23c:	03 c0       	rjmp	.+6      	; 0x244 <LCD_DisplayString+0x16>
		LCD_displayCharacter(str[i]);		
     23e:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_displayCharacter>
}

void LCD_DisplayString(char *str)
{
		
	for(unsigned short i=0;str[i]!='\0';i++)
     242:	21 96       	adiw	r28, 0x01	; 1
     244:	f8 01       	movw	r30, r16
     246:	ec 0f       	add	r30, r28
     248:	fd 1f       	adc	r31, r29
     24a:	80 81       	ld	r24, Z
     24c:	81 11       	cpse	r24, r1
     24e:	f7 cf       	rjmp	.-18     	; 0x23e <LCD_DisplayString+0x10>
		LCD_displayCharacter(str[i]);		
			
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	1f 91       	pop	r17
     256:	0f 91       	pop	r16
     258:	08 95       	ret

0000025a <LCD_clearScreen>:

void LCD_clearScreen()
{
	LCD_sendcommand(CLEAR_COMMAND);
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	0e 94 75 00 	call	0xea	; 0xea <LCD_sendcommand>
     260:	08 95       	ret

00000262 <LCD_goToRowColumn>:
void LCD_goToRowColumn(unsigned char row,unsigned char col)
{
	unsigned char Address;
	
	/* first of all calculate the required address */
	switch(row)
     262:	88 23       	and	r24, r24
     264:	29 f0       	breq	.+10     	; 0x270 <LCD_goToRowColumn+0xe>
     266:	81 30       	cpi	r24, 0x01	; 1
     268:	21 f4       	brne	.+8      	; 0x272 <LCD_goToRowColumn+0x10>
	{
		case 0:
				Address=col;
				break;
		case 1:
				Address=col+0x40;
     26a:	90 e4       	ldi	r25, 0x40	; 64
     26c:	96 0f       	add	r25, r22
				break;
     26e:	01 c0       	rjmp	.+2      	; 0x272 <LCD_goToRowColumn+0x10>
	
	/* first of all calculate the required address */
	switch(row)
	{
		case 0:
				Address=col;
     270:	96 2f       	mov	r25, r22
				break;

	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendcommand(Address | SET_CURSOR_LOCATION); 
     272:	89 2f       	mov	r24, r25
     274:	80 68       	ori	r24, 0x80	; 128
     276:	0e 94 75 00 	call	0xea	; 0xea <LCD_sendcommand>
     27a:	08 95       	ret

0000027c <Display_Temp>:
{
	LCD_goToRowColumn(0,9);
	char buff[16];
	itoa(Adc_readChannel(1),buff,10);
	LCD_DisplayString(buff);
}
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	cd b7       	in	r28, 0x3d	; 61
     282:	de b7       	in	r29, 0x3e	; 62
     284:	60 97       	sbiw	r28, 0x10	; 16
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	f8 94       	cli
     28a:	de bf       	out	0x3e, r29	; 62
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	cd bf       	out	0x3d, r28	; 61
     290:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_clearScreen>
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	0e 94 31 01 	call	0x262	; 0x262 <LCD_goToRowColumn>
     29c:	85 e3       	ldi	r24, 0x35	; 53
     29e:	94 e0       	ldi	r25, 0x04	; 4
     2a0:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_DisplayString>
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 5b 00 	call	0xb6	; 0xb6 <Adc_readChannel>
     2aa:	4a e0       	ldi	r20, 0x0A	; 10
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	be 01       	movw	r22, r28
     2b0:	6f 5f       	subi	r22, 0xFF	; 255
     2b2:	7f 4f       	sbci	r23, 0xFF	; 255
     2b4:	0e 94 b2 05 	call	0xb64	; 0xb64 <itoa>
     2b8:	65 e0       	ldi	r22, 0x05	; 5
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	0e 94 31 01 	call	0x262	; 0x262 <LCD_goToRowColumn>
     2c0:	ce 01       	movw	r24, r28
     2c2:	01 96       	adiw	r24, 0x01	; 1
     2c4:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_DisplayString>
     2c8:	60 96       	adiw	r28, 0x10	; 16
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <__vector_11>:
     2da:	1f 92       	push	r1
     2dc:	0f 92       	push	r0
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	0f 92       	push	r0
     2e2:	11 24       	eor	r1, r1
     2e4:	2f 93       	push	r18
     2e6:	3f 93       	push	r19
     2e8:	4f 93       	push	r20
     2ea:	5f 93       	push	r21
     2ec:	6f 93       	push	r22
     2ee:	7f 93       	push	r23
     2f0:	8f 93       	push	r24
     2f2:	9f 93       	push	r25
     2f4:	af 93       	push	r26
     2f6:	bf 93       	push	r27
     2f8:	ef 93       	push	r30
     2fa:	ff 93       	push	r31
     2fc:	0e 94 3e 01 	call	0x27c	; 0x27c <Display_Temp>
     300:	ff 91       	pop	r31
     302:	ef 91       	pop	r30
     304:	bf 91       	pop	r27
     306:	af 91       	pop	r26
     308:	9f 91       	pop	r25
     30a:	8f 91       	pop	r24
     30c:	7f 91       	pop	r23
     30e:	6f 91       	pop	r22
     310:	5f 91       	pop	r21
     312:	4f 91       	pop	r20
     314:	3f 91       	pop	r19
     316:	2f 91       	pop	r18
     318:	0f 90       	pop	r0
     31a:	0f be       	out	0x3f, r0	; 63
     31c:	0f 90       	pop	r0
     31e:	1f 90       	pop	r1
     320:	18 95       	reti

00000322 <Display_Motion>:
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	0e 94 31 01 	call	0x262	; 0x262 <LCD_goToRowColumn>
     32a:	8b e3       	ldi	r24, 0x3B	; 59
     32c:	94 e0       	ldi	r25, 0x04	; 4
     32e:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_DisplayString>
     332:	08 95       	ret

00000334 <__vector_1>:
     334:	1f 92       	push	r1
     336:	0f 92       	push	r0
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	0f 92       	push	r0
     33c:	11 24       	eor	r1, r1
     33e:	2f 93       	push	r18
     340:	3f 93       	push	r19
     342:	4f 93       	push	r20
     344:	5f 93       	push	r21
     346:	6f 93       	push	r22
     348:	7f 93       	push	r23
     34a:	8f 93       	push	r24
     34c:	9f 93       	push	r25
     34e:	af 93       	push	r26
     350:	bf 93       	push	r27
     352:	ef 93       	push	r30
     354:	ff 93       	push	r31
     356:	0e 94 91 01 	call	0x322	; 0x322 <Display_Motion>
     35a:	ff 91       	pop	r31
     35c:	ef 91       	pop	r30
     35e:	bf 91       	pop	r27
     360:	af 91       	pop	r26
     362:	9f 91       	pop	r25
     364:	8f 91       	pop	r24
     366:	7f 91       	pop	r23
     368:	6f 91       	pop	r22
     36a:	5f 91       	pop	r21
     36c:	4f 91       	pop	r20
     36e:	3f 91       	pop	r19
     370:	2f 91       	pop	r18
     372:	0f 90       	pop	r0
     374:	0f be       	out	0x3f, r0	; 63
     376:	0f 90       	pop	r0
     378:	1f 90       	pop	r1
     37a:	18 95       	reti

0000037c <Timer1_Init>:

void Timer1_Init()
{
	
	TCNT1=0;									// Set Timer 1 initial value to 0
     37c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     380:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1B=(1<<CS12)|(1<<CS10)|(1<<WGM12);		 // Prescaler  Clk/1024
     384:	8d e0       	ldi	r24, 0x0D	; 13
     386:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1|=(1<<OCIE1A);
     38a:	ef e6       	ldi	r30, 0x6F	; 111
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	80 81       	ld	r24, Z
     390:	82 60       	ori	r24, 0x02	; 2
     392:	80 83       	st	Z, r24
	OCR1A=0xFFFF;								//Init the compare register with the number of counts you need , freq_atmega328p= 16mhz .
     394:	8f ef       	ldi	r24, 0xFF	; 255
     396:	9f ef       	ldi	r25, 0xFF	; 255
     398:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     39c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     3a0:	08 95       	ret

000003a2 <INT0_Init>:
	
}

void INT0_Init(void)
{
	DDRD&=~(1<<2);			//Motion sensor Pin as Input
     3a2:	8a b1       	in	r24, 0x0a	; 10
     3a4:	8b 7f       	andi	r24, 0xFB	; 251
     3a6:	8a b9       	out	0x0a, r24	; 10
	EIMSK|= (1<<INT0);				// Enable external interrupt pin INT0
     3a8:	8d b3       	in	r24, 0x1d	; 29
     3aa:	81 60       	ori	r24, 0x01	; 1
     3ac:	8d bb       	out	0x1d, r24	; 29
	EICRA|=(1<<ISC00)|(1<<ISC01);		//rising edge
     3ae:	e9 e6       	ldi	r30, 0x69	; 105
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	83 60       	ori	r24, 0x03	; 3
     3b6:	80 83       	st	Z, r24
     3b8:	08 95       	ret

000003ba <main>:


int main(void)
{
				
	CLEAR_BIT(DDRD,0);				//Rx pin as InPut 
     3ba:	8a b1       	in	r24, 0x0a	; 10
     3bc:	8e 7f       	andi	r24, 0xFE	; 254
     3be:	8a b9       	out	0x0a, r24	; 10
	LCD_init();
     3c0:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_init>
	LCD_clearScreen();
     3c4:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_clearScreen>
	Adc_init();
     3c8:	0e 94 53 00 	call	0xa6	; 0xa6 <Adc_init>
	Uart_init();
     3cc:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Uart_init>
	Wifi_Init("Mostafa.","H20001222H");
     3d0:	6b e4       	ldi	r22, 0x4B	; 75
     3d2:	74 e0       	ldi	r23, 0x04	; 4
     3d4:	86 e5       	ldi	r24, 0x56	; 86
     3d6:	94 e0       	ldi	r25, 0x04	; 4
     3d8:	0e 94 2d 02 	call	0x45a	; 0x45a <Wifi_Init>
	Get_Ip(IP);
     3dc:	86 ea       	ldi	r24, 0xA6	; 166
     3de:	94 e0       	ldi	r25, 0x04	; 4
     3e0:	0e 94 c5 02 	call	0x58a	; 0x58a <Get_Ip>
	Timer1_Init();			//every 3 seconds display temp on lcd timer interrupt
     3e4:	0e 94 be 01 	call	0x37c	; 0x37c <Timer1_Init>
	INT0_Init();			//external interrupt
     3e8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <INT0_Init>
	sei();
     3ec:	78 94       	sei
    while (1) 
    {
		
	//	Display_smoke();		 
	  Website();
     3ee:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Website>
     3f2:	fd cf       	rjmp	.-6      	; 0x3ee <main+0x34>

000003f4 <Uart_init>:


void Uart_init()
{
	//Asynchronous USART , No Parity , one stop bit, 8 bit data mode
	UCSR0C=(1<<UCSZ01)|(1<<UCSZ00);
     3f4:	86 e0       	ldi	r24, 0x06	; 6
     3f6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B=(1<<TXEN0)|(1<<RXEN0);
     3fa:	88 e1       	ldi	r24, 0x18	; 24
     3fc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	//Enabling Double Speed Operation this bit will reduce the divisor of the baud rate divider from 16 to 8
	UCSR0A=(1<<U2X0);
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
     
	UBRR0L=BAUD_PRESCALE;
     406:	8f ec       	ldi	r24, 0xCF	; 207
     408:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UBRR0H=BAUD_PRESCALE>>8;
     40c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     410:	08 95       	ret

00000412 <Uart_SendByte>:
	
}

void Uart_SendByte(const unsigned char data)
{
	while(BIT_IS_CLEAR(UCSR0A,UDRE0));
     412:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     416:	95 ff       	sbrs	r25, 5
     418:	fc cf       	rjmp	.-8      	; 0x412 <Uart_SendByte>
	UDR0=data;
     41a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     41e:	08 95       	ret

00000420 <Uart_ReceiveByte>:
}

unsigned char Uart_ReceiveByte(void){
	while(BIT_IS_CLEAR(UCSR0A,RXC0));
     420:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     424:	88 23       	and	r24, r24
     426:	e4 f7       	brge	.-8      	; 0x420 <Uart_ReceiveByte>
	return UDR0;
     428:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
     42c:	08 95       	ret

0000042e <Uart_SendString>:

void Uart_SendString(const unsigned char * str){
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	8c 01       	movw	r16, r24
	for(unsigned short i=0;str[i]!='\0';i++)
     438:	c0 e0       	ldi	r28, 0x00	; 0
     43a:	d0 e0       	ldi	r29, 0x00	; 0
     43c:	03 c0       	rjmp	.+6      	; 0x444 <Uart_SendString+0x16>
	{
		Uart_SendByte(str[i]);
     43e:	0e 94 09 02 	call	0x412	; 0x412 <Uart_SendByte>
	while(BIT_IS_CLEAR(UCSR0A,RXC0));
	return UDR0;
}

void Uart_SendString(const unsigned char * str){
	for(unsigned short i=0;str[i]!='\0';i++)
     442:	21 96       	adiw	r28, 0x01	; 1
     444:	f8 01       	movw	r30, r16
     446:	ec 0f       	add	r30, r28
     448:	fd 1f       	adc	r31, r29
     44a:	80 81       	ld	r24, Z
     44c:	81 11       	cpse	r24, r1
     44e:	f7 cf       	rjmp	.-18     	; 0x43e <Uart_SendString+0x10>
	{
		Uart_SendByte(str[i]);
	}
}
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	08 95       	ret

0000045a <Wifi_Init>:
#define Led1 2
#define Led2 3


void Wifi_Init(const unsigned char *ssid,const unsigned char* password)
{
     45a:	ef 92       	push	r14
     45c:	ff 92       	push	r15
     45e:	0f 93       	push	r16
     460:	1f 93       	push	r17
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
     46a:	a8 97       	sbiw	r28, 0x28	; 40
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	de bf       	out	0x3e, r29	; 62
     472:	0f be       	out	0x3f, r0	; 63
     474:	cd bf       	out	0x3d, r28	; 61
     476:	18 2f       	mov	r17, r24
     478:	09 2f       	mov	r16, r25
     47a:	f6 2e       	mov	r15, r22
     47c:	e7 2e       	mov	r14, r23
	Uart_SendString("AT+RST\r\n\0");					 //Restart esp module
     47e:	8d e0       	ldi	r24, 0x0D	; 13
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	0e 94 17 02 	call	0x42e	; 0x42e <Uart_SendString>
     486:	2f ef       	ldi	r18, 0xFF	; 255
     488:	85 ee       	ldi	r24, 0xE5	; 229
     48a:	9a ea       	ldi	r25, 0xAA	; 170
     48c:	21 50       	subi	r18, 0x01	; 1
     48e:	80 40       	sbci	r24, 0x00	; 0
     490:	90 40       	sbci	r25, 0x00	; 0
     492:	e1 f7       	brne	.-8      	; 0x48c <Wifi_Init+0x32>
     494:	00 c0       	rjmp	.+0      	; 0x496 <Wifi_Init+0x3c>
     496:	00 00       	nop
	_delay_ms(3500);
	LCD_displayCharacter('.');
     498:	8e e2       	ldi	r24, 0x2E	; 46
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_displayCharacter>
	
	Uart_SendString("AT+UART_DEF=9600,8,1,0,0\r\n\0");
     4a0:	87 e1       	ldi	r24, 0x17	; 23
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0e 94 17 02 	call	0x42e	; 0x42e <Uart_SendString>
     4a8:	2f ef       	ldi	r18, 0xFF	; 255
     4aa:	85 ee       	ldi	r24, 0xE5	; 229
     4ac:	9a ea       	ldi	r25, 0xAA	; 170
     4ae:	21 50       	subi	r18, 0x01	; 1
     4b0:	80 40       	sbci	r24, 0x00	; 0
     4b2:	90 40       	sbci	r25, 0x00	; 0
     4b4:	e1 f7       	brne	.-8      	; 0x4ae <Wifi_Init+0x54>
     4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <Wifi_Init+0x5e>
     4b8:	00 00       	nop
	_delay_ms(3500);
	LCD_displayCharacter('.');
     4ba:	8e e2       	ldi	r24, 0x2E	; 46
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_displayCharacter>

	char AccessPoint[40];
	sprintf(AccessPoint,"AT+CWJAP=\"%s\",\"%s\"\r\n\0",ssid,password);    //send to esp the ssid and password of the access point 
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	83 e3       	ldi	r24, 0x33	; 51
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	9f 93       	push	r25
     4d0:	8f 93       	push	r24
     4d2:	8e 01       	movw	r16, r28
     4d4:	0f 5f       	subi	r16, 0xFF	; 255
     4d6:	1f 4f       	sbci	r17, 0xFF	; 255
     4d8:	1f 93       	push	r17
     4da:	0f 93       	push	r16
     4dc:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <sprintf>
	Uart_SendString(AccessPoint);
     4e0:	c8 01       	movw	r24, r16
     4e2:	0e 94 17 02 	call	0x42e	; 0x42e <Uart_SendString>
     4e6:	2f ef       	ldi	r18, 0xFF	; 255
     4e8:	85 ee       	ldi	r24, 0xE5	; 229
     4ea:	9a ea       	ldi	r25, 0xAA	; 170
     4ec:	21 50       	subi	r18, 0x01	; 1
     4ee:	80 40       	sbci	r24, 0x00	; 0
     4f0:	90 40       	sbci	r25, 0x00	; 0
     4f2:	e1 f7       	brne	.-8      	; 0x4ec <Wifi_Init+0x92>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <Wifi_Init+0x9c>
     4f6:	00 00       	nop
	_delay_ms(3500);
	LCD_displayCharacter('.');
     4f8:	8e e2       	ldi	r24, 0x2E	; 46
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_displayCharacter>
	
	Uart_SendString("AT+CWMODE=1\r\n\0");
     500:	89 e4       	ldi	r24, 0x49	; 73
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	0e 94 17 02 	call	0x42e	; 0x42e <Uart_SendString>
     508:	2f ef       	ldi	r18, 0xFF	; 255
     50a:	85 ee       	ldi	r24, 0xE5	; 229
     50c:	9a ea       	ldi	r25, 0xAA	; 170
     50e:	21 50       	subi	r18, 0x01	; 1
     510:	80 40       	sbci	r24, 0x00	; 0
     512:	90 40       	sbci	r25, 0x00	; 0
     514:	e1 f7       	brne	.-8      	; 0x50e <Wifi_Init+0xb4>
     516:	00 c0       	rjmp	.+0      	; 0x518 <Wifi_Init+0xbe>
     518:	00 00       	nop
	_delay_ms(3500);
	LCD_displayCharacter('.');
     51a:	8e e2       	ldi	r24, 0x2E	; 46
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_displayCharacter>

	Uart_SendString("AT+CIPMUX=1\r\n\0");     // Enable multiple connections to multiple     
     522:	88 e5       	ldi	r24, 0x58	; 88
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	0e 94 17 02 	call	0x42e	; 0x42e <Uart_SendString>
     52a:	2f ef       	ldi	r18, 0xFF	; 255
     52c:	85 ee       	ldi	r24, 0xE5	; 229
     52e:	9a ea       	ldi	r25, 0xAA	; 170
     530:	21 50       	subi	r18, 0x01	; 1
     532:	80 40       	sbci	r24, 0x00	; 0
     534:	90 40       	sbci	r25, 0x00	; 0
     536:	e1 f7       	brne	.-8      	; 0x530 <Wifi_Init+0xd6>
     538:	00 c0       	rjmp	.+0      	; 0x53a <Wifi_Init+0xe0>
     53a:	00 00       	nop
	_delay_ms(3500);
	LCD_displayCharacter('.');
     53c:	8e e2       	ldi	r24, 0x2E	; 46
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_displayCharacter>
	
	Uart_SendString("AT+CIPSERVER=1,80\r\n\0");  //Configure as server in Port 80
     544:	87 e6       	ldi	r24, 0x67	; 103
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	0e 94 17 02 	call	0x42e	; 0x42e <Uart_SendString>
     54c:	2f ef       	ldi	r18, 0xFF	; 255
     54e:	85 ee       	ldi	r24, 0xE5	; 229
     550:	9a ea       	ldi	r25, 0xAA	; 170
     552:	21 50       	subi	r18, 0x01	; 1
     554:	80 40       	sbci	r24, 0x00	; 0
     556:	90 40       	sbci	r25, 0x00	; 0
     558:	e1 f7       	brne	.-8      	; 0x552 <Wifi_Init+0xf8>
     55a:	00 c0       	rjmp	.+0      	; 0x55c <Wifi_Init+0x102>
     55c:	00 00       	nop
	_delay_ms(3500);
	LCD_displayCharacter('.');
     55e:	8e e2       	ldi	r24, 0x2E	; 46
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_displayCharacter>
	
}
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	f8 94       	cli
     56a:	de bf       	out	0x3e, r29	; 62
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	cd bf       	out	0x3d, r28	; 61
     570:	a8 96       	adiw	r28, 0x28	; 40
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	de bf       	out	0x3e, r29	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	cd bf       	out	0x3d, r28	; 61
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	1f 91       	pop	r17
     582:	0f 91       	pop	r16
     584:	ff 90       	pop	r15
     586:	ef 90       	pop	r14
     588:	08 95       	ret

0000058a <Get_Ip>:


void Get_Ip(unsigned char *ip){
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	cb 54       	subi	r28, 0x4B	; 75
     59c:	d1 09       	sbc	r29, r1
     59e:	0f b6       	in	r0, 0x3f	; 63
     5a0:	f8 94       	cli
     5a2:	de bf       	out	0x3e, r29	; 62
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	cd bf       	out	0x3d, r28	; 61
     5a8:	8c 01       	movw	r16, r24
	
	unsigned char ch,str[75];			
	
	unsigned char i=0;
	Uart_SendString("AT+CIFSR\r\n");				  //request the IP
     5aa:	8f e5       	ldi	r24, 0x5F	; 95
     5ac:	94 e0       	ldi	r25, 0x04	; 4
     5ae:	0e 94 17 02 	call	0x42e	; 0x42e <Uart_SendString>

void Get_Ip(unsigned char *ip){
	
	unsigned char ch,str[75];			
	
	unsigned char i=0;
     5b2:	f1 2c       	mov	r15, r1
	Uart_SendString("AT+CIFSR\r\n");				  //request the IP
	
	while (ch!='M')								     //keep receiving until the First Letter of Word "MAC"
     5b4:	0b c0       	rjmp	.+22     	; 0x5cc <Get_Ip+0x42>
	{
		ch=Uart_ReceiveByte();		
     5b6:	0e 94 10 02 	call	0x420	; 0x420 <Uart_ReceiveByte>
     5ba:	e8 2e       	mov	r14, r24
		str[i]=ch;
     5bc:	e1 e0       	ldi	r30, 0x01	; 1
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	ec 0f       	add	r30, r28
     5c2:	fd 1f       	adc	r31, r29
     5c4:	ef 0d       	add	r30, r15
     5c6:	f1 1d       	adc	r31, r1
     5c8:	80 83       	st	Z, r24
		i++;	
     5ca:	f3 94       	inc	r15
	unsigned char ch,str[75];			
	
	unsigned char i=0;
	Uart_SendString("AT+CIFSR\r\n");				  //request the IP
	
	while (ch!='M')								     //keep receiving until the First Letter of Word "MAC"
     5cc:	2d e4       	ldi	r18, 0x4D	; 77
     5ce:	e2 12       	cpse	r14, r18
     5d0:	f2 cf       	rjmp	.-28     	; 0x5b6 <Get_Ip+0x2c>
		ch=Uart_ReceiveByte();		
		str[i]=ch;
		i++;	
	}
	
	str[i]='\0';					
     5d2:	e1 e0       	ldi	r30, 0x01	; 1
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	ec 0f       	add	r30, r28
     5d8:	fd 1f       	adc	r31, r29
     5da:	ef 0d       	add	r30, r15
     5dc:	f1 1d       	adc	r31, r1
     5de:	10 82       	st	Z, r1
	
	unsigned char flag=0,j=0;
	for(int i=0;str[i]!='\0';i++)					//loop on the received string to extract the ip address of the server
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
		i++;	
	}
	
	str[i]='\0';					
	
	unsigned char flag=0,j=0;
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;str[i]!='\0';i++)					//loop on the received string to extract the ip address of the server
     5e8:	0c c0       	rjmp	.+24     	; 0x602 <Get_Ip+0x78>
	{
		
		if(flag==1)
     5ea:	91 30       	cpi	r25, 0x01	; 1
     5ec:	29 f4       	brne	.+10     	; 0x5f8 <Get_Ip+0x6e>
		{
			ip[j]=str[i];
     5ee:	f8 01       	movw	r30, r16
     5f0:	e4 0f       	add	r30, r20
     5f2:	f1 1d       	adc	r31, r1
     5f4:	80 83       	st	Z, r24
			j++;
     5f6:	4f 5f       	subi	r20, 0xFF	; 255
		}
		
		if(str[i]=='\"')
     5f8:	82 32       	cpi	r24, 0x22	; 34
     5fa:	09 f4       	brne	.+2      	; 0x5fe <Get_Ip+0x74>
		{
			flag++;
     5fc:	9f 5f       	subi	r25, 0xFF	; 255
	}
	
	str[i]='\0';					
	
	unsigned char flag=0,j=0;
	for(int i=0;str[i]!='\0';i++)					//loop on the received string to extract the ip address of the server
     5fe:	2f 5f       	subi	r18, 0xFF	; 255
     600:	3f 4f       	sbci	r19, 0xFF	; 255
     602:	e1 e0       	ldi	r30, 0x01	; 1
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	ec 0f       	add	r30, r28
     608:	fd 1f       	adc	r31, r29
     60a:	e2 0f       	add	r30, r18
     60c:	f3 1f       	adc	r31, r19
     60e:	80 81       	ld	r24, Z
     610:	81 11       	cpse	r24, r1
     612:	eb cf       	rjmp	.-42     	; 0x5ea <Get_Ip+0x60>
		{
			flag++;
		}
	}
	
	ip[j-1]='\0';
     614:	e4 2f       	mov	r30, r20
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	31 97       	sbiw	r30, 0x01	; 1
     61a:	e0 0f       	add	r30, r16
     61c:	f1 1f       	adc	r31, r17
     61e:	10 82       	st	Z, r1
	
 	LCD_clearScreen();				    	//Display the IP on the LCD Screen
     620:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_clearScreen>
 	LCD_DisplayString(ip);
     624:	c8 01       	movw	r24, r16
     626:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_DisplayString>
     62a:	8f ef       	ldi	r24, 0xFF	; 255
     62c:	95 ec       	ldi	r25, 0xC5	; 197
     62e:	2c e5       	ldi	r18, 0x5C	; 92
     630:	81 50       	subi	r24, 0x01	; 1
     632:	90 40       	sbci	r25, 0x00	; 0
     634:	20 40       	sbci	r18, 0x00	; 0
     636:	e1 f7       	brne	.-8      	; 0x630 <Get_Ip+0xa6>
     638:	00 c0       	rjmp	.+0      	; 0x63a <Get_Ip+0xb0>
     63a:	00 00       	nop
    _delay_ms(1900);
}
     63c:	c5 5b       	subi	r28, 0xB5	; 181
     63e:	df 4f       	sbci	r29, 0xFF	; 255
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	ff 90       	pop	r15
     654:	ef 90       	pop	r14
     656:	08 95       	ret

00000658 <Control_Led>:
		
}

void Control_Led(unsigned char Pressed_button){
		
	if(Pressed_button=='1')
     658:	81 33       	cpi	r24, 0x31	; 49
     65a:	b1 f4       	brne	.+44     	; 0x688 <Control_Led+0x30>
	{
		if(BIT_IS_SET(PORTB,Led1))
     65c:	2a 9b       	sbis	0x05, 2	; 5
     65e:	0a c0       	rjmp	.+20     	; 0x674 <Control_Led+0x1c>
		{
			button1="OFF";
     660:	8a e6       	ldi	r24, 0x6A	; 106
     662:	94 e0       	ldi	r25, 0x04	; 4
     664:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <button1+0x1>
     668:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <button1>
			CLEAR_BIT(PORTB,Led1);
     66c:	85 b1       	in	r24, 0x05	; 5
     66e:	8b 7f       	andi	r24, 0xFB	; 251
     670:	85 b9       	out	0x05, r24	; 5
     672:	21 c0       	rjmp	.+66     	; 0x6b6 <Control_Led+0x5e>
		}else
		{
			button1="ON";
     674:	8e e6       	ldi	r24, 0x6E	; 110
     676:	94 e0       	ldi	r25, 0x04	; 4
     678:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <button1+0x1>
     67c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <button1>
			SIT_BIT(PORTB,Led1);
     680:	85 b1       	in	r24, 0x05	; 5
     682:	84 60       	ori	r24, 0x04	; 4
     684:	85 b9       	out	0x05, r24	; 5
     686:	17 c0       	rjmp	.+46     	; 0x6b6 <Control_Led+0x5e>
		}
	}else if(Pressed_button=='2')
     688:	82 33       	cpi	r24, 0x32	; 50
     68a:	a9 f4       	brne	.+42     	; 0x6b6 <Control_Led+0x5e>
	{
		if(BIT_IS_SET(PORTB,Led2))
     68c:	2b 9b       	sbis	0x05, 3	; 5
     68e:	0a c0       	rjmp	.+20     	; 0x6a4 <Control_Led+0x4c>
		{
			button2="OFF";
     690:	8a e6       	ldi	r24, 0x6A	; 106
     692:	94 e0       	ldi	r25, 0x04	; 4
     694:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <button2+0x1>
     698:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <button2>
			CLEAR_BIT(PORTB,Led2);
     69c:	85 b1       	in	r24, 0x05	; 5
     69e:	87 7f       	andi	r24, 0xF7	; 247
     6a0:	85 b9       	out	0x05, r24	; 5
     6a2:	09 c0       	rjmp	.+18     	; 0x6b6 <Control_Led+0x5e>
		}else
		{
			button2="ON";
     6a4:	8e e6       	ldi	r24, 0x6E	; 110
     6a6:	94 e0       	ldi	r25, 0x04	; 4
     6a8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <button2+0x1>
     6ac:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <button2>
			SIT_BIT(PORTB,Led2);
     6b0:	85 b1       	in	r24, 0x05	; 5
     6b2:	88 60       	ori	r24, 0x08	; 8
     6b4:	85 b9       	out	0x05, r24	; 5
		}
	}
	
	
	if(Adc_readChannel(0)>500)
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 5b 00 	call	0xb6	; 0xb6 <Adc_readChannel>
     6be:	85 3f       	cpi	r24, 0xF5	; 245
     6c0:	91 40       	sbci	r25, 0x01	; 1
     6c2:	3c f0       	brlt	.+14     	; 0x6d2 <Control_Led+0x7a>
	{
	Conditions="HIGH TEMP DETECTED";
     6c4:	81 e7       	ldi	r24, 0x71	; 113
     6c6:	94 e0       	ldi	r25, 0x04	; 4
     6c8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Conditions+0x1>
     6cc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Conditions>
     6d0:	08 95       	ret
	}else if(BIT_IS_SET(PIND,2))
     6d2:	4a 9b       	sbis	0x09, 2	; 9
     6d4:	07 c0       	rjmp	.+14     	; 0x6e4 <Control_Led+0x8c>
	{
	Conditions="MOTION DETECTED";	
     6d6:	84 e8       	ldi	r24, 0x84	; 132
     6d8:	94 e0       	ldi	r25, 0x04	; 4
     6da:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Conditions+0x1>
     6de:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Conditions>
     6e2:	08 95       	ret
	}else{
	Conditions="IOT Smart System";
     6e4:	84 e9       	ldi	r24, 0x94	; 148
     6e6:	94 e0       	ldi	r25, 0x04	; 4
     6e8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Conditions+0x1>
     6ec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Conditions>
     6f0:	08 95       	ret

000006f2 <Get_Request_Details>:
    _delay_ms(1900);
}


unsigned char Get_Request_Details()				//Return the Connection Id
{
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	64 97       	sbiw	r28, 0x14	; 20
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	de bf       	out	0x3e, r29	; 62
     708:	0f be       	out	0x3f, r0	; 63
     70a:	cd bf       	out	0x3d, r28	; 61
	
		
	unsigned char ch,str[20],i=0,flag=0;
     70c:	10 e0       	ldi	r17, 0x00	; 0
     70e:	00 e0       	ldi	r16, 0x00	; 0

	while(i<17)
     710:	0f c0       	rjmp	.+30     	; 0x730 <Get_Request_Details+0x3e>
	{
		ch=Uart_ReceiveByte();
     712:	0e 94 10 02 	call	0x420	; 0x420 <Uart_ReceiveByte>
		if(ch=='+')								//Wait until +IPD is Received
     716:	8b 32       	cpi	r24, 0x2B	; 43
     718:	09 f4       	brne	.+2      	; 0x71c <Get_Request_Details+0x2a>
		{
			flag=1;
     71a:	11 e0       	ldi	r17, 0x01	; 1
		}
		
		if(flag==1)
     71c:	11 30       	cpi	r17, 0x01	; 1
     71e:	41 f4       	brne	.+16     	; 0x730 <Get_Request_Details+0x3e>
		{
			str[i]=ch;
     720:	e1 e0       	ldi	r30, 0x01	; 1
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	ec 0f       	add	r30, r28
     726:	fd 1f       	adc	r31, r29
     728:	e0 0f       	add	r30, r16
     72a:	f1 1d       	adc	r31, r1
     72c:	80 83       	st	Z, r24
			i++;
     72e:	0f 5f       	subi	r16, 0xFF	; 255
{
	
		
	unsigned char ch,str[20],i=0,flag=0;

	while(i<17)
     730:	01 31       	cpi	r16, 0x11	; 17
     732:	78 f3       	brcs	.-34     	; 0x712 <Get_Request_Details+0x20>
			str[i]=ch;
			i++;
		}
	}
	
	if(flag==1)
     734:	11 30       	cpi	r17, 0x01	; 1
     736:	19 f4       	brne	.+6      	; 0x73e <Get_Request_Details+0x4c>
	Connection_ID=str[5];			 //+IPD,ID     , str[5] has the connection id number
     738:	8e 81       	ldd	r24, Y+6	; 0x06
     73a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Connection_ID>
		
	str[i+1]='\0';
     73e:	e0 2f       	mov	r30, r16
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	31 96       	adiw	r30, 0x01	; 1
     744:	41 e0       	ldi	r20, 0x01	; 1
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	4c 0f       	add	r20, r28
     74a:	5d 1f       	adc	r21, r29
     74c:	e4 0f       	add	r30, r20
     74e:	f5 1f       	adc	r31, r21
     750:	10 82       	st	Z, r1
		
	unsigned char path;
	for(unsigned char j=5;str[j]!='\0';j++)			//Search for Word Get IN the Request to Get the required Path
     752:	25 e0       	ldi	r18, 0x05	; 5
     754:	22 c0       	rjmp	.+68     	; 0x79a <Get_Request_Details+0xa8>
	{
		if(str[j-2]=='G'&&str[j-1]=='E'&&str[j]=='T')
     756:	fc 01       	movw	r30, r24
     758:	32 97       	sbiw	r30, 0x02	; 2
     75a:	41 e0       	ldi	r20, 0x01	; 1
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	4c 0f       	add	r20, r28
     760:	5d 1f       	adc	r21, r29
     762:	e4 0f       	add	r30, r20
     764:	f5 1f       	adc	r31, r21
     766:	40 81       	ld	r20, Z
     768:	47 34       	cpi	r20, 0x47	; 71
     76a:	b1 f4       	brne	.+44     	; 0x798 <Get_Request_Details+0xa6>
     76c:	fc 01       	movw	r30, r24
     76e:	31 97       	sbiw	r30, 0x01	; 1
     770:	41 e0       	ldi	r20, 0x01	; 1
     772:	50 e0       	ldi	r21, 0x00	; 0
     774:	4c 0f       	add	r20, r28
     776:	5d 1f       	adc	r21, r29
     778:	e4 0f       	add	r30, r20
     77a:	f5 1f       	adc	r31, r21
     77c:	40 81       	ld	r20, Z
     77e:	45 34       	cpi	r20, 0x45	; 69
     780:	59 f4       	brne	.+22     	; 0x798 <Get_Request_Details+0xa6>
     782:	34 35       	cpi	r19, 0x54	; 84
     784:	49 f4       	brne	.+18     	; 0x798 <Get_Request_Details+0xa6>
		{
			path=str[j+3];
     786:	03 96       	adiw	r24, 0x03	; 3
     788:	e1 e0       	ldi	r30, 0x01	; 1
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	ec 0f       	add	r30, r28
     78e:	fd 1f       	adc	r31, r29
     790:	e8 0f       	add	r30, r24
     792:	f9 1f       	adc	r31, r25
     794:	f0 80       	ld	r15, Z
			break;
     796:	0c c0       	rjmp	.+24     	; 0x7b0 <Get_Request_Details+0xbe>
	Connection_ID=str[5];			 //+IPD,ID     , str[5] has the connection id number
		
	str[i+1]='\0';
		
	unsigned char path;
	for(unsigned char j=5;str[j]!='\0';j++)			//Search for Word Get IN the Request to Get the required Path
     798:	2f 5f       	subi	r18, 0xFF	; 255
     79a:	82 2f       	mov	r24, r18
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	e1 e0       	ldi	r30, 0x01	; 1
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	ec 0f       	add	r30, r28
     7a4:	fd 1f       	adc	r31, r29
     7a6:	e8 0f       	add	r30, r24
     7a8:	f9 1f       	adc	r31, r25
     7aa:	30 81       	ld	r19, Z
     7ac:	31 11       	cpse	r19, r1
     7ae:	d3 cf       	rjmp	.-90     	; 0x756 <Get_Request_Details+0x64>
			path=str[j+3];
			break;
		}
	}
		
	Control_Led(path);
     7b0:	8f 2d       	mov	r24, r15
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 2c 03 	call	0x658	; 0x658 <Control_Led>
		
	return Connection_ID;
	
}
     7b8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Connection_ID>
     7bc:	64 96       	adiw	r28, 0x14	; 20
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	08 95       	ret

000007d4 <GetLength>:
	
	return;
}

unsigned short GetLength(unsigned char* str)
{
     7d4:	bc 01       	movw	r22, r24
	unsigned short len=0;
	for(unsigned short i=0;str[i]!='\0';i++){
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
	return;
}

unsigned short GetLength(unsigned char* str)
{
	unsigned short len=0;
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
	for(unsigned short i=0;str[i]!='\0';i++){
     7de:	03 c0       	rjmp	.+6      	; 0x7e6 <GetLength+0x12>
		len++;
     7e0:	01 96       	adiw	r24, 0x01	; 1
}

unsigned short GetLength(unsigned char* str)
{
	unsigned short len=0;
	for(unsigned short i=0;str[i]!='\0';i++){
     7e2:	2f 5f       	subi	r18, 0xFF	; 255
     7e4:	3f 4f       	sbci	r19, 0xFF	; 255
     7e6:	fb 01       	movw	r30, r22
     7e8:	e2 0f       	add	r30, r18
     7ea:	f3 1f       	adc	r31, r19
     7ec:	40 81       	ld	r20, Z
     7ee:	41 11       	cpse	r20, r1
     7f0:	f7 cf       	rjmp	.-18     	; 0x7e0 <GetLength+0xc>
		len++;
	}
	return len;
	
}
     7f2:	08 95       	ret

000007f4 <Website>:
	return Connection_ID;
	
}

void Website()
{
     7f4:	cf 92       	push	r12
     7f6:	df 92       	push	r13
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
     806:	c5 55       	subi	r28, 0x55	; 85
     808:	d1 09       	sbc	r29, r1
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	de bf       	out	0x3e, r29	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char ID=Get_Request_Details();	
     814:	0e 94 79 03 	call	0x6f2	; 0x6f2 <Get_Request_Details>
     818:	18 2f       	mov	r17, r24
	if(ID=='9')
     81a:	89 33       	cpi	r24, 0x39	; 57
     81c:	09 f4       	brne	.+2      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     81e:	72 c0       	rjmp	.+228    	; 0x904 <__stack+0x5>
		<a href=\"/1\"><button id=\"on_btn\" class=\"btn b-1-on\">%s</button></a>\
		<a href=\"/2\"><button id=\"off_btn\" class=\"btn b-2-on\">%s</button></a>\
		</div></section></body></html>\0";
		
		
		char *Updated_web=malloc(GetLength(web_Page_Packet1)+2);				// replace the %s with the button text 
     820:	8c e7       	ldi	r24, 0x7C	; 124
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <GetLength>
     828:	02 96       	adiw	r24, 0x02	; 2
     82a:	0e 94 91 04 	call	0x922	; 0x922 <malloc>
     82e:	f8 2e       	mov	r15, r24
     830:	09 2f       	mov	r16, r25
 		sprintf(Updated_web,web_Page_Packet1,Conditions,button1,button2);
     832:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <button2+0x1>
     836:	8f 93       	push	r24
     838:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <button2>
     83c:	8f 93       	push	r24
     83e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <button1+0x1>
     842:	8f 93       	push	r24
     844:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <button1>
     848:	8f 93       	push	r24
     84a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Conditions+0x1>
     84e:	8f 93       	push	r24
     850:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Conditions>
     854:	8f 93       	push	r24
     856:	8c e7       	ldi	r24, 0x7C	; 124
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	9f 93       	push	r25
     85c:	8f 93       	push	r24
     85e:	0f 93       	push	r16
     860:	ff 92       	push	r15
     862:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <sprintf>
		 
		 
		char Send_Command[45];
		sprintf(Send_Command,"AT+CIPSEND=%c,%d\r\n\0",ID,GetLength(Updated_web));
     866:	8f 2d       	mov	r24, r15
     868:	90 2f       	mov	r25, r16
     86a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <GetLength>
     86e:	9f 93       	push	r25
     870:	8f 93       	push	r24
     872:	1f 92       	push	r1
     874:	1f 93       	push	r17
     876:	8f e0       	ldi	r24, 0x0F	; 15
     878:	94 e0       	ldi	r25, 0x04	; 4
     87a:	9f 93       	push	r25
     87c:	8f 93       	push	r24
     87e:	6e 01       	movw	r12, r28
     880:	29 e2       	ldi	r18, 0x29	; 41
     882:	c2 0e       	add	r12, r18
     884:	d1 1c       	adc	r13, r1
     886:	df 92       	push	r13
     888:	cf 92       	push	r12
     88a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <sprintf>
		Uart_SendString(Send_Command);
     88e:	c6 01       	movw	r24, r12
     890:	0e 94 17 02 	call	0x42e	; 0x42e <Uart_SendString>
     894:	8f ef       	ldi	r24, 0xFF	; 255
     896:	93 ed       	ldi	r25, 0xD3	; 211
     898:	20 e3       	ldi	r18, 0x30	; 48
     89a:	81 50       	subi	r24, 0x01	; 1
     89c:	90 40       	sbci	r25, 0x00	; 0
     89e:	20 40       	sbci	r18, 0x00	; 0
     8a0:	e1 f7       	brne	.-8      	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
     8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
     8a4:	00 00       	nop
		_delay_ms(1000);
		Uart_SendString(Updated_web);
     8a6:	8f 2d       	mov	r24, r15
     8a8:	90 2f       	mov	r25, r16
     8aa:	0e 94 17 02 	call	0x42e	; 0x42e <Uart_SendString>
     8ae:	8f ef       	ldi	r24, 0xFF	; 255
     8b0:	93 ed       	ldi	r25, 0xD3	; 211
     8b2:	20 e3       	ldi	r18, 0x30	; 48
     8b4:	81 50       	subi	r24, 0x01	; 1
     8b6:	90 40       	sbci	r25, 0x00	; 0
     8b8:	20 40       	sbci	r18, 0x00	; 0
     8ba:	e1 f7       	brne	.-8      	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     8bc:	00 c0       	rjmp	.+0      	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
     8be:	00 00       	nop
		_delay_ms(1000);
		
		free(Updated_web);
     8c0:	8f 2d       	mov	r24, r15
     8c2:	90 2f       	mov	r25, r16
     8c4:	0e 94 29 05 	call	0xa52	; 0xa52 <free>
	}
	

	char Close_Command[40];
	sprintf(Close_Command,"AT+CIPCLOSE=%c\r\n\0",ID);
     8c8:	1f 92       	push	r1
     8ca:	1f 93       	push	r17
     8cc:	83 e2       	ldi	r24, 0x23	; 35
     8ce:	94 e0       	ldi	r25, 0x04	; 4
     8d0:	9f 93       	push	r25
     8d2:	8f 93       	push	r24
     8d4:	8e 01       	movw	r16, r28
     8d6:	0f 5f       	subi	r16, 0xFF	; 255
     8d8:	1f 4f       	sbci	r17, 0xFF	; 255
     8da:	1f 93       	push	r17
     8dc:	0f 93       	push	r16
     8de:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <sprintf>
	Uart_SendString(Close_Command);
     8e2:	c8 01       	movw	r24, r16
     8e4:	0e 94 17 02 	call	0x42e	; 0x42e <Uart_SendString>
     8e8:	8f ef       	ldi	r24, 0xFF	; 255
     8ea:	93 ed       	ldi	r25, 0xD3	; 211
     8ec:	20 e3       	ldi	r18, 0x30	; 48
     8ee:	81 50       	subi	r24, 0x01	; 1
     8f0:	90 40       	sbci	r25, 0x00	; 0
     8f2:	20 40       	sbci	r18, 0x00	; 0
     8f4:	e1 f7       	brne	.-8      	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
     8f8:	00 00       	nop
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	de bf       	out	0x3e, r29	; 62
     900:	0f be       	out	0x3f, r0	; 63
     902:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(1000);
		
}
     904:	cb 5a       	subi	r28, 0xAB	; 171
     906:	df 4f       	sbci	r29, 0xFF	; 255
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	de bf       	out	0x3e, r29	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	cd bf       	out	0x3d, r28	; 61
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	0f 91       	pop	r16
     91a:	ff 90       	pop	r15
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	08 95       	ret

00000922 <malloc>:
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	91 05       	cpc	r25, r1
     92e:	10 f4       	brcc	.+4      	; 0x934 <malloc+0x12>
     930:	82 e0       	ldi	r24, 0x02	; 2
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <__flp>
     938:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <__flp+0x1>
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	a0 e0       	ldi	r26, 0x00	; 0
     942:	b0 e0       	ldi	r27, 0x00	; 0
     944:	30 97       	sbiw	r30, 0x00	; 0
     946:	19 f1       	breq	.+70     	; 0x98e <malloc+0x6c>
     948:	40 81       	ld	r20, Z
     94a:	51 81       	ldd	r21, Z+1	; 0x01
     94c:	02 81       	ldd	r16, Z+2	; 0x02
     94e:	13 81       	ldd	r17, Z+3	; 0x03
     950:	48 17       	cp	r20, r24
     952:	59 07       	cpc	r21, r25
     954:	c8 f0       	brcs	.+50     	; 0x988 <malloc+0x66>
     956:	84 17       	cp	r24, r20
     958:	95 07       	cpc	r25, r21
     95a:	69 f4       	brne	.+26     	; 0x976 <malloc+0x54>
     95c:	10 97       	sbiw	r26, 0x00	; 0
     95e:	31 f0       	breq	.+12     	; 0x96c <malloc+0x4a>
     960:	12 96       	adiw	r26, 0x02	; 2
     962:	0c 93       	st	X, r16
     964:	12 97       	sbiw	r26, 0x02	; 2
     966:	13 96       	adiw	r26, 0x03	; 3
     968:	1c 93       	st	X, r17
     96a:	27 c0       	rjmp	.+78     	; 0x9ba <malloc+0x98>
     96c:	00 93 b8 04 	sts	0x04B8, r16	; 0x8004b8 <__flp>
     970:	10 93 b9 04 	sts	0x04B9, r17	; 0x8004b9 <__flp+0x1>
     974:	22 c0       	rjmp	.+68     	; 0x9ba <malloc+0x98>
     976:	21 15       	cp	r18, r1
     978:	31 05       	cpc	r19, r1
     97a:	19 f0       	breq	.+6      	; 0x982 <malloc+0x60>
     97c:	42 17       	cp	r20, r18
     97e:	53 07       	cpc	r21, r19
     980:	18 f4       	brcc	.+6      	; 0x988 <malloc+0x66>
     982:	9a 01       	movw	r18, r20
     984:	bd 01       	movw	r22, r26
     986:	ef 01       	movw	r28, r30
     988:	df 01       	movw	r26, r30
     98a:	f8 01       	movw	r30, r16
     98c:	db cf       	rjmp	.-74     	; 0x944 <malloc+0x22>
     98e:	21 15       	cp	r18, r1
     990:	31 05       	cpc	r19, r1
     992:	f9 f0       	breq	.+62     	; 0x9d2 <malloc+0xb0>
     994:	28 1b       	sub	r18, r24
     996:	39 0b       	sbc	r19, r25
     998:	24 30       	cpi	r18, 0x04	; 4
     99a:	31 05       	cpc	r19, r1
     99c:	80 f4       	brcc	.+32     	; 0x9be <malloc+0x9c>
     99e:	8a 81       	ldd	r24, Y+2	; 0x02
     9a0:	9b 81       	ldd	r25, Y+3	; 0x03
     9a2:	61 15       	cp	r22, r1
     9a4:	71 05       	cpc	r23, r1
     9a6:	21 f0       	breq	.+8      	; 0x9b0 <malloc+0x8e>
     9a8:	fb 01       	movw	r30, r22
     9aa:	93 83       	std	Z+3, r25	; 0x03
     9ac:	82 83       	std	Z+2, r24	; 0x02
     9ae:	04 c0       	rjmp	.+8      	; 0x9b8 <malloc+0x96>
     9b0:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <__flp+0x1>
     9b4:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <__flp>
     9b8:	fe 01       	movw	r30, r28
     9ba:	32 96       	adiw	r30, 0x02	; 2
     9bc:	44 c0       	rjmp	.+136    	; 0xa46 <malloc+0x124>
     9be:	fe 01       	movw	r30, r28
     9c0:	e2 0f       	add	r30, r18
     9c2:	f3 1f       	adc	r31, r19
     9c4:	81 93       	st	Z+, r24
     9c6:	91 93       	st	Z+, r25
     9c8:	22 50       	subi	r18, 0x02	; 2
     9ca:	31 09       	sbc	r19, r1
     9cc:	39 83       	std	Y+1, r19	; 0x01
     9ce:	28 83       	st	Y, r18
     9d0:	3a c0       	rjmp	.+116    	; 0xa46 <malloc+0x124>
     9d2:	20 91 b6 04 	lds	r18, 0x04B6	; 0x8004b6 <__brkval>
     9d6:	30 91 b7 04 	lds	r19, 0x04B7	; 0x8004b7 <__brkval+0x1>
     9da:	23 2b       	or	r18, r19
     9dc:	41 f4       	brne	.+16     	; 0x9ee <malloc+0xcc>
     9de:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     9e2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     9e6:	30 93 b7 04 	sts	0x04B7, r19	; 0x8004b7 <__brkval+0x1>
     9ea:	20 93 b6 04 	sts	0x04B6, r18	; 0x8004b6 <__brkval>
     9ee:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     9f2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     9f6:	21 15       	cp	r18, r1
     9f8:	31 05       	cpc	r19, r1
     9fa:	41 f4       	brne	.+16     	; 0xa0c <malloc+0xea>
     9fc:	2d b7       	in	r18, 0x3d	; 61
     9fe:	3e b7       	in	r19, 0x3e	; 62
     a00:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     a04:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     a08:	24 1b       	sub	r18, r20
     a0a:	35 0b       	sbc	r19, r21
     a0c:	e0 91 b6 04 	lds	r30, 0x04B6	; 0x8004b6 <__brkval>
     a10:	f0 91 b7 04 	lds	r31, 0x04B7	; 0x8004b7 <__brkval+0x1>
     a14:	e2 17       	cp	r30, r18
     a16:	f3 07       	cpc	r31, r19
     a18:	a0 f4       	brcc	.+40     	; 0xa42 <malloc+0x120>
     a1a:	2e 1b       	sub	r18, r30
     a1c:	3f 0b       	sbc	r19, r31
     a1e:	28 17       	cp	r18, r24
     a20:	39 07       	cpc	r19, r25
     a22:	78 f0       	brcs	.+30     	; 0xa42 <malloc+0x120>
     a24:	ac 01       	movw	r20, r24
     a26:	4e 5f       	subi	r20, 0xFE	; 254
     a28:	5f 4f       	sbci	r21, 0xFF	; 255
     a2a:	24 17       	cp	r18, r20
     a2c:	35 07       	cpc	r19, r21
     a2e:	48 f0       	brcs	.+18     	; 0xa42 <malloc+0x120>
     a30:	4e 0f       	add	r20, r30
     a32:	5f 1f       	adc	r21, r31
     a34:	50 93 b7 04 	sts	0x04B7, r21	; 0x8004b7 <__brkval+0x1>
     a38:	40 93 b6 04 	sts	0x04B6, r20	; 0x8004b6 <__brkval>
     a3c:	81 93       	st	Z+, r24
     a3e:	91 93       	st	Z+, r25
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <malloc+0x124>
     a42:	e0 e0       	ldi	r30, 0x00	; 0
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	cf 01       	movw	r24, r30
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	08 95       	ret

00000a52 <free>:
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	00 97       	sbiw	r24, 0x00	; 0
     a58:	09 f4       	brne	.+2      	; 0xa5c <free+0xa>
     a5a:	81 c0       	rjmp	.+258    	; 0xb5e <free+0x10c>
     a5c:	fc 01       	movw	r30, r24
     a5e:	32 97       	sbiw	r30, 0x02	; 2
     a60:	13 82       	std	Z+3, r1	; 0x03
     a62:	12 82       	std	Z+2, r1	; 0x02
     a64:	a0 91 b8 04 	lds	r26, 0x04B8	; 0x8004b8 <__flp>
     a68:	b0 91 b9 04 	lds	r27, 0x04B9	; 0x8004b9 <__flp+0x1>
     a6c:	10 97       	sbiw	r26, 0x00	; 0
     a6e:	81 f4       	brne	.+32     	; 0xa90 <free+0x3e>
     a70:	20 81       	ld	r18, Z
     a72:	31 81       	ldd	r19, Z+1	; 0x01
     a74:	82 0f       	add	r24, r18
     a76:	93 1f       	adc	r25, r19
     a78:	20 91 b6 04 	lds	r18, 0x04B6	; 0x8004b6 <__brkval>
     a7c:	30 91 b7 04 	lds	r19, 0x04B7	; 0x8004b7 <__brkval+0x1>
     a80:	28 17       	cp	r18, r24
     a82:	39 07       	cpc	r19, r25
     a84:	51 f5       	brne	.+84     	; 0xada <free+0x88>
     a86:	f0 93 b7 04 	sts	0x04B7, r31	; 0x8004b7 <__brkval+0x1>
     a8a:	e0 93 b6 04 	sts	0x04B6, r30	; 0x8004b6 <__brkval>
     a8e:	67 c0       	rjmp	.+206    	; 0xb5e <free+0x10c>
     a90:	ed 01       	movw	r28, r26
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	ce 17       	cp	r28, r30
     a98:	df 07       	cpc	r29, r31
     a9a:	40 f4       	brcc	.+16     	; 0xaac <free+0x5a>
     a9c:	4a 81       	ldd	r20, Y+2	; 0x02
     a9e:	5b 81       	ldd	r21, Y+3	; 0x03
     aa0:	9e 01       	movw	r18, r28
     aa2:	41 15       	cp	r20, r1
     aa4:	51 05       	cpc	r21, r1
     aa6:	f1 f0       	breq	.+60     	; 0xae4 <free+0x92>
     aa8:	ea 01       	movw	r28, r20
     aaa:	f5 cf       	rjmp	.-22     	; 0xa96 <free+0x44>
     aac:	d3 83       	std	Z+3, r29	; 0x03
     aae:	c2 83       	std	Z+2, r28	; 0x02
     ab0:	40 81       	ld	r20, Z
     ab2:	51 81       	ldd	r21, Z+1	; 0x01
     ab4:	84 0f       	add	r24, r20
     ab6:	95 1f       	adc	r25, r21
     ab8:	c8 17       	cp	r28, r24
     aba:	d9 07       	cpc	r29, r25
     abc:	59 f4       	brne	.+22     	; 0xad4 <free+0x82>
     abe:	88 81       	ld	r24, Y
     ac0:	99 81       	ldd	r25, Y+1	; 0x01
     ac2:	84 0f       	add	r24, r20
     ac4:	95 1f       	adc	r25, r21
     ac6:	02 96       	adiw	r24, 0x02	; 2
     ac8:	91 83       	std	Z+1, r25	; 0x01
     aca:	80 83       	st	Z, r24
     acc:	8a 81       	ldd	r24, Y+2	; 0x02
     ace:	9b 81       	ldd	r25, Y+3	; 0x03
     ad0:	93 83       	std	Z+3, r25	; 0x03
     ad2:	82 83       	std	Z+2, r24	; 0x02
     ad4:	21 15       	cp	r18, r1
     ad6:	31 05       	cpc	r19, r1
     ad8:	29 f4       	brne	.+10     	; 0xae4 <free+0x92>
     ada:	f0 93 b9 04 	sts	0x04B9, r31	; 0x8004b9 <__flp+0x1>
     ade:	e0 93 b8 04 	sts	0x04B8, r30	; 0x8004b8 <__flp>
     ae2:	3d c0       	rjmp	.+122    	; 0xb5e <free+0x10c>
     ae4:	e9 01       	movw	r28, r18
     ae6:	fb 83       	std	Y+3, r31	; 0x03
     ae8:	ea 83       	std	Y+2, r30	; 0x02
     aea:	49 91       	ld	r20, Y+
     aec:	59 91       	ld	r21, Y+
     aee:	c4 0f       	add	r28, r20
     af0:	d5 1f       	adc	r29, r21
     af2:	ec 17       	cp	r30, r28
     af4:	fd 07       	cpc	r31, r29
     af6:	61 f4       	brne	.+24     	; 0xb10 <free+0xbe>
     af8:	80 81       	ld	r24, Z
     afa:	91 81       	ldd	r25, Z+1	; 0x01
     afc:	84 0f       	add	r24, r20
     afe:	95 1f       	adc	r25, r21
     b00:	02 96       	adiw	r24, 0x02	; 2
     b02:	e9 01       	movw	r28, r18
     b04:	99 83       	std	Y+1, r25	; 0x01
     b06:	88 83       	st	Y, r24
     b08:	82 81       	ldd	r24, Z+2	; 0x02
     b0a:	93 81       	ldd	r25, Z+3	; 0x03
     b0c:	9b 83       	std	Y+3, r25	; 0x03
     b0e:	8a 83       	std	Y+2, r24	; 0x02
     b10:	e0 e0       	ldi	r30, 0x00	; 0
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	12 96       	adiw	r26, 0x02	; 2
     b16:	8d 91       	ld	r24, X+
     b18:	9c 91       	ld	r25, X
     b1a:	13 97       	sbiw	r26, 0x03	; 3
     b1c:	00 97       	sbiw	r24, 0x00	; 0
     b1e:	19 f0       	breq	.+6      	; 0xb26 <free+0xd4>
     b20:	fd 01       	movw	r30, r26
     b22:	dc 01       	movw	r26, r24
     b24:	f7 cf       	rjmp	.-18     	; 0xb14 <free+0xc2>
     b26:	8d 91       	ld	r24, X+
     b28:	9c 91       	ld	r25, X
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	9d 01       	movw	r18, r26
     b2e:	2e 5f       	subi	r18, 0xFE	; 254
     b30:	3f 4f       	sbci	r19, 0xFF	; 255
     b32:	82 0f       	add	r24, r18
     b34:	93 1f       	adc	r25, r19
     b36:	20 91 b6 04 	lds	r18, 0x04B6	; 0x8004b6 <__brkval>
     b3a:	30 91 b7 04 	lds	r19, 0x04B7	; 0x8004b7 <__brkval+0x1>
     b3e:	28 17       	cp	r18, r24
     b40:	39 07       	cpc	r19, r25
     b42:	69 f4       	brne	.+26     	; 0xb5e <free+0x10c>
     b44:	30 97       	sbiw	r30, 0x00	; 0
     b46:	29 f4       	brne	.+10     	; 0xb52 <free+0x100>
     b48:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <__flp+0x1>
     b4c:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <__flp>
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <free+0x104>
     b52:	13 82       	std	Z+3, r1	; 0x03
     b54:	12 82       	std	Z+2, r1	; 0x02
     b56:	b0 93 b7 04 	sts	0x04B7, r27	; 0x8004b7 <__brkval+0x1>
     b5a:	a0 93 b6 04 	sts	0x04B6, r26	; 0x8004b6 <__brkval>
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	08 95       	ret

00000b64 <itoa>:
     b64:	45 32       	cpi	r20, 0x25	; 37
     b66:	51 05       	cpc	r21, r1
     b68:	20 f4       	brcc	.+8      	; 0xb72 <itoa+0xe>
     b6a:	42 30       	cpi	r20, 0x02	; 2
     b6c:	10 f0       	brcs	.+4      	; 0xb72 <itoa+0xe>
     b6e:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__itoa_ncheck>
     b72:	fb 01       	movw	r30, r22
     b74:	10 82       	st	Z, r1
     b76:	cb 01       	movw	r24, r22
     b78:	08 95       	ret

00000b7a <__itoa_ncheck>:
     b7a:	bb 27       	eor	r27, r27
     b7c:	4a 30       	cpi	r20, 0x0A	; 10
     b7e:	31 f4       	brne	.+12     	; 0xb8c <__itoa_ncheck+0x12>
     b80:	99 23       	and	r25, r25
     b82:	22 f4       	brpl	.+8      	; 0xb8c <__itoa_ncheck+0x12>
     b84:	bd e2       	ldi	r27, 0x2D	; 45
     b86:	90 95       	com	r25
     b88:	81 95       	neg	r24
     b8a:	9f 4f       	sbci	r25, 0xFF	; 255
     b8c:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__utoa_common>

00000b90 <__utoa_ncheck>:
     b90:	bb 27       	eor	r27, r27

00000b92 <__utoa_common>:
     b92:	fb 01       	movw	r30, r22
     b94:	55 27       	eor	r21, r21
     b96:	aa 27       	eor	r26, r26
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	aa 1f       	adc	r26, r26
     b9e:	a4 17       	cp	r26, r20
     ba0:	10 f0       	brcs	.+4      	; 0xba6 <__utoa_common+0x14>
     ba2:	a4 1b       	sub	r26, r20
     ba4:	83 95       	inc	r24
     ba6:	50 51       	subi	r21, 0x10	; 16
     ba8:	b9 f7       	brne	.-18     	; 0xb98 <__utoa_common+0x6>
     baa:	a0 5d       	subi	r26, 0xD0	; 208
     bac:	aa 33       	cpi	r26, 0x3A	; 58
     bae:	08 f0       	brcs	.+2      	; 0xbb2 <__utoa_common+0x20>
     bb0:	a9 5d       	subi	r26, 0xD9	; 217
     bb2:	a1 93       	st	Z+, r26
     bb4:	00 97       	sbiw	r24, 0x00	; 0
     bb6:	79 f7       	brne	.-34     	; 0xb96 <__utoa_common+0x4>
     bb8:	b1 11       	cpse	r27, r1
     bba:	b1 93       	st	Z+, r27
     bbc:	11 92       	st	Z+, r1
     bbe:	cb 01       	movw	r24, r22
     bc0:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <strrev>

00000bc4 <sprintf>:
     bc4:	ae e0       	ldi	r26, 0x0E	; 14
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e8 ee       	ldi	r30, 0xE8	; 232
     bca:	f5 e0       	ldi	r31, 0x05	; 5
     bcc:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <__prologue_saves__+0x1c>
     bd0:	0d 89       	ldd	r16, Y+21	; 0x15
     bd2:	1e 89       	ldd	r17, Y+22	; 0x16
     bd4:	86 e0       	ldi	r24, 0x06	; 6
     bd6:	8c 83       	std	Y+4, r24	; 0x04
     bd8:	1a 83       	std	Y+2, r17	; 0x02
     bda:	09 83       	std	Y+1, r16	; 0x01
     bdc:	8f ef       	ldi	r24, 0xFF	; 255
     bde:	9f e7       	ldi	r25, 0x7F	; 127
     be0:	9e 83       	std	Y+6, r25	; 0x06
     be2:	8d 83       	std	Y+5, r24	; 0x05
     be4:	ae 01       	movw	r20, r28
     be6:	47 5e       	subi	r20, 0xE7	; 231
     be8:	5f 4f       	sbci	r21, 0xFF	; 255
     bea:	6f 89       	ldd	r22, Y+23	; 0x17
     bec:	78 8d       	ldd	r23, Y+24	; 0x18
     bee:	ce 01       	movw	r24, r28
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	0e 94 04 06 	call	0xc08	; 0xc08 <vfprintf>
     bf6:	ef 81       	ldd	r30, Y+7	; 0x07
     bf8:	f8 85       	ldd	r31, Y+8	; 0x08
     bfa:	e0 0f       	add	r30, r16
     bfc:	f1 1f       	adc	r31, r17
     bfe:	10 82       	st	Z, r1
     c00:	2e 96       	adiw	r28, 0x0e	; 14
     c02:	e4 e0       	ldi	r30, 0x04	; 4
     c04:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__epilogue_restores__+0x1c>

00000c08 <vfprintf>:
     c08:	ab e0       	ldi	r26, 0x0B	; 11
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	ea e0       	ldi	r30, 0x0A	; 10
     c0e:	f6 e0       	ldi	r31, 0x06	; 6
     c10:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__prologue_saves__>
     c14:	6c 01       	movw	r12, r24
     c16:	7b 01       	movw	r14, r22
     c18:	8a 01       	movw	r16, r20
     c1a:	fc 01       	movw	r30, r24
     c1c:	17 82       	std	Z+7, r1	; 0x07
     c1e:	16 82       	std	Z+6, r1	; 0x06
     c20:	83 81       	ldd	r24, Z+3	; 0x03
     c22:	81 ff       	sbrs	r24, 1
     c24:	cc c1       	rjmp	.+920    	; 0xfbe <vfprintf+0x3b6>
     c26:	ce 01       	movw	r24, r28
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	3c 01       	movw	r6, r24
     c2c:	f6 01       	movw	r30, r12
     c2e:	93 81       	ldd	r25, Z+3	; 0x03
     c30:	f7 01       	movw	r30, r14
     c32:	93 fd       	sbrc	r25, 3
     c34:	85 91       	lpm	r24, Z+
     c36:	93 ff       	sbrs	r25, 3
     c38:	81 91       	ld	r24, Z+
     c3a:	7f 01       	movw	r14, r30
     c3c:	88 23       	and	r24, r24
     c3e:	09 f4       	brne	.+2      	; 0xc42 <vfprintf+0x3a>
     c40:	ba c1       	rjmp	.+884    	; 0xfb6 <vfprintf+0x3ae>
     c42:	85 32       	cpi	r24, 0x25	; 37
     c44:	39 f4       	brne	.+14     	; 0xc54 <vfprintf+0x4c>
     c46:	93 fd       	sbrc	r25, 3
     c48:	85 91       	lpm	r24, Z+
     c4a:	93 ff       	sbrs	r25, 3
     c4c:	81 91       	ld	r24, Z+
     c4e:	7f 01       	movw	r14, r30
     c50:	85 32       	cpi	r24, 0x25	; 37
     c52:	29 f4       	brne	.+10     	; 0xc5e <vfprintf+0x56>
     c54:	b6 01       	movw	r22, r12
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 0b 08 	call	0x1016	; 0x1016 <fputc>
     c5c:	e7 cf       	rjmp	.-50     	; 0xc2c <vfprintf+0x24>
     c5e:	91 2c       	mov	r9, r1
     c60:	21 2c       	mov	r2, r1
     c62:	31 2c       	mov	r3, r1
     c64:	ff e1       	ldi	r31, 0x1F	; 31
     c66:	f3 15       	cp	r31, r3
     c68:	d8 f0       	brcs	.+54     	; 0xca0 <vfprintf+0x98>
     c6a:	8b 32       	cpi	r24, 0x2B	; 43
     c6c:	79 f0       	breq	.+30     	; 0xc8c <vfprintf+0x84>
     c6e:	38 f4       	brcc	.+14     	; 0xc7e <vfprintf+0x76>
     c70:	80 32       	cpi	r24, 0x20	; 32
     c72:	79 f0       	breq	.+30     	; 0xc92 <vfprintf+0x8a>
     c74:	83 32       	cpi	r24, 0x23	; 35
     c76:	a1 f4       	brne	.+40     	; 0xca0 <vfprintf+0x98>
     c78:	23 2d       	mov	r18, r3
     c7a:	20 61       	ori	r18, 0x10	; 16
     c7c:	1d c0       	rjmp	.+58     	; 0xcb8 <vfprintf+0xb0>
     c7e:	8d 32       	cpi	r24, 0x2D	; 45
     c80:	61 f0       	breq	.+24     	; 0xc9a <vfprintf+0x92>
     c82:	80 33       	cpi	r24, 0x30	; 48
     c84:	69 f4       	brne	.+26     	; 0xca0 <vfprintf+0x98>
     c86:	23 2d       	mov	r18, r3
     c88:	21 60       	ori	r18, 0x01	; 1
     c8a:	16 c0       	rjmp	.+44     	; 0xcb8 <vfprintf+0xb0>
     c8c:	83 2d       	mov	r24, r3
     c8e:	82 60       	ori	r24, 0x02	; 2
     c90:	38 2e       	mov	r3, r24
     c92:	e3 2d       	mov	r30, r3
     c94:	e4 60       	ori	r30, 0x04	; 4
     c96:	3e 2e       	mov	r3, r30
     c98:	2a c0       	rjmp	.+84     	; 0xcee <vfprintf+0xe6>
     c9a:	f3 2d       	mov	r31, r3
     c9c:	f8 60       	ori	r31, 0x08	; 8
     c9e:	1d c0       	rjmp	.+58     	; 0xcda <vfprintf+0xd2>
     ca0:	37 fc       	sbrc	r3, 7
     ca2:	2d c0       	rjmp	.+90     	; 0xcfe <vfprintf+0xf6>
     ca4:	20 ed       	ldi	r18, 0xD0	; 208
     ca6:	28 0f       	add	r18, r24
     ca8:	2a 30       	cpi	r18, 0x0A	; 10
     caa:	40 f0       	brcs	.+16     	; 0xcbc <vfprintf+0xb4>
     cac:	8e 32       	cpi	r24, 0x2E	; 46
     cae:	b9 f4       	brne	.+46     	; 0xcde <vfprintf+0xd6>
     cb0:	36 fc       	sbrc	r3, 6
     cb2:	81 c1       	rjmp	.+770    	; 0xfb6 <vfprintf+0x3ae>
     cb4:	23 2d       	mov	r18, r3
     cb6:	20 64       	ori	r18, 0x40	; 64
     cb8:	32 2e       	mov	r3, r18
     cba:	19 c0       	rjmp	.+50     	; 0xcee <vfprintf+0xe6>
     cbc:	36 fe       	sbrs	r3, 6
     cbe:	06 c0       	rjmp	.+12     	; 0xccc <vfprintf+0xc4>
     cc0:	8a e0       	ldi	r24, 0x0A	; 10
     cc2:	98 9e       	mul	r9, r24
     cc4:	20 0d       	add	r18, r0
     cc6:	11 24       	eor	r1, r1
     cc8:	92 2e       	mov	r9, r18
     cca:	11 c0       	rjmp	.+34     	; 0xcee <vfprintf+0xe6>
     ccc:	ea e0       	ldi	r30, 0x0A	; 10
     cce:	2e 9e       	mul	r2, r30
     cd0:	20 0d       	add	r18, r0
     cd2:	11 24       	eor	r1, r1
     cd4:	22 2e       	mov	r2, r18
     cd6:	f3 2d       	mov	r31, r3
     cd8:	f0 62       	ori	r31, 0x20	; 32
     cda:	3f 2e       	mov	r3, r31
     cdc:	08 c0       	rjmp	.+16     	; 0xcee <vfprintf+0xe6>
     cde:	8c 36       	cpi	r24, 0x6C	; 108
     ce0:	21 f4       	brne	.+8      	; 0xcea <vfprintf+0xe2>
     ce2:	83 2d       	mov	r24, r3
     ce4:	80 68       	ori	r24, 0x80	; 128
     ce6:	38 2e       	mov	r3, r24
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <vfprintf+0xe6>
     cea:	88 36       	cpi	r24, 0x68	; 104
     cec:	41 f4       	brne	.+16     	; 0xcfe <vfprintf+0xf6>
     cee:	f7 01       	movw	r30, r14
     cf0:	93 fd       	sbrc	r25, 3
     cf2:	85 91       	lpm	r24, Z+
     cf4:	93 ff       	sbrs	r25, 3
     cf6:	81 91       	ld	r24, Z+
     cf8:	7f 01       	movw	r14, r30
     cfa:	81 11       	cpse	r24, r1
     cfc:	b3 cf       	rjmp	.-154    	; 0xc64 <vfprintf+0x5c>
     cfe:	98 2f       	mov	r25, r24
     d00:	9f 7d       	andi	r25, 0xDF	; 223
     d02:	95 54       	subi	r25, 0x45	; 69
     d04:	93 30       	cpi	r25, 0x03	; 3
     d06:	28 f4       	brcc	.+10     	; 0xd12 <vfprintf+0x10a>
     d08:	0c 5f       	subi	r16, 0xFC	; 252
     d0a:	1f 4f       	sbci	r17, 0xFF	; 255
     d0c:	9f e3       	ldi	r25, 0x3F	; 63
     d0e:	99 83       	std	Y+1, r25	; 0x01
     d10:	0d c0       	rjmp	.+26     	; 0xd2c <vfprintf+0x124>
     d12:	83 36       	cpi	r24, 0x63	; 99
     d14:	31 f0       	breq	.+12     	; 0xd22 <vfprintf+0x11a>
     d16:	83 37       	cpi	r24, 0x73	; 115
     d18:	71 f0       	breq	.+28     	; 0xd36 <vfprintf+0x12e>
     d1a:	83 35       	cpi	r24, 0x53	; 83
     d1c:	09 f0       	breq	.+2      	; 0xd20 <vfprintf+0x118>
     d1e:	59 c0       	rjmp	.+178    	; 0xdd2 <vfprintf+0x1ca>
     d20:	21 c0       	rjmp	.+66     	; 0xd64 <vfprintf+0x15c>
     d22:	f8 01       	movw	r30, r16
     d24:	80 81       	ld	r24, Z
     d26:	89 83       	std	Y+1, r24	; 0x01
     d28:	0e 5f       	subi	r16, 0xFE	; 254
     d2a:	1f 4f       	sbci	r17, 0xFF	; 255
     d2c:	88 24       	eor	r8, r8
     d2e:	83 94       	inc	r8
     d30:	91 2c       	mov	r9, r1
     d32:	53 01       	movw	r10, r6
     d34:	13 c0       	rjmp	.+38     	; 0xd5c <vfprintf+0x154>
     d36:	28 01       	movw	r4, r16
     d38:	f2 e0       	ldi	r31, 0x02	; 2
     d3a:	4f 0e       	add	r4, r31
     d3c:	51 1c       	adc	r5, r1
     d3e:	f8 01       	movw	r30, r16
     d40:	a0 80       	ld	r10, Z
     d42:	b1 80       	ldd	r11, Z+1	; 0x01
     d44:	36 fe       	sbrs	r3, 6
     d46:	03 c0       	rjmp	.+6      	; 0xd4e <vfprintf+0x146>
     d48:	69 2d       	mov	r22, r9
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <vfprintf+0x14a>
     d4e:	6f ef       	ldi	r22, 0xFF	; 255
     d50:	7f ef       	ldi	r23, 0xFF	; 255
     d52:	c5 01       	movw	r24, r10
     d54:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <strnlen>
     d58:	4c 01       	movw	r8, r24
     d5a:	82 01       	movw	r16, r4
     d5c:	f3 2d       	mov	r31, r3
     d5e:	ff 77       	andi	r31, 0x7F	; 127
     d60:	3f 2e       	mov	r3, r31
     d62:	16 c0       	rjmp	.+44     	; 0xd90 <vfprintf+0x188>
     d64:	28 01       	movw	r4, r16
     d66:	22 e0       	ldi	r18, 0x02	; 2
     d68:	42 0e       	add	r4, r18
     d6a:	51 1c       	adc	r5, r1
     d6c:	f8 01       	movw	r30, r16
     d6e:	a0 80       	ld	r10, Z
     d70:	b1 80       	ldd	r11, Z+1	; 0x01
     d72:	36 fe       	sbrs	r3, 6
     d74:	03 c0       	rjmp	.+6      	; 0xd7c <vfprintf+0x174>
     d76:	69 2d       	mov	r22, r9
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <vfprintf+0x178>
     d7c:	6f ef       	ldi	r22, 0xFF	; 255
     d7e:	7f ef       	ldi	r23, 0xFF	; 255
     d80:	c5 01       	movw	r24, r10
     d82:	0e 94 e5 07 	call	0xfca	; 0xfca <strnlen_P>
     d86:	4c 01       	movw	r8, r24
     d88:	f3 2d       	mov	r31, r3
     d8a:	f0 68       	ori	r31, 0x80	; 128
     d8c:	3f 2e       	mov	r3, r31
     d8e:	82 01       	movw	r16, r4
     d90:	33 fc       	sbrc	r3, 3
     d92:	1b c0       	rjmp	.+54     	; 0xdca <vfprintf+0x1c2>
     d94:	82 2d       	mov	r24, r2
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	88 16       	cp	r8, r24
     d9a:	99 06       	cpc	r9, r25
     d9c:	b0 f4       	brcc	.+44     	; 0xdca <vfprintf+0x1c2>
     d9e:	b6 01       	movw	r22, r12
     da0:	80 e2       	ldi	r24, 0x20	; 32
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	0e 94 0b 08 	call	0x1016	; 0x1016 <fputc>
     da8:	2a 94       	dec	r2
     daa:	f4 cf       	rjmp	.-24     	; 0xd94 <vfprintf+0x18c>
     dac:	f5 01       	movw	r30, r10
     dae:	37 fc       	sbrc	r3, 7
     db0:	85 91       	lpm	r24, Z+
     db2:	37 fe       	sbrs	r3, 7
     db4:	81 91       	ld	r24, Z+
     db6:	5f 01       	movw	r10, r30
     db8:	b6 01       	movw	r22, r12
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 0b 08 	call	0x1016	; 0x1016 <fputc>
     dc0:	21 10       	cpse	r2, r1
     dc2:	2a 94       	dec	r2
     dc4:	21 e0       	ldi	r18, 0x01	; 1
     dc6:	82 1a       	sub	r8, r18
     dc8:	91 08       	sbc	r9, r1
     dca:	81 14       	cp	r8, r1
     dcc:	91 04       	cpc	r9, r1
     dce:	71 f7       	brne	.-36     	; 0xdac <vfprintf+0x1a4>
     dd0:	e8 c0       	rjmp	.+464    	; 0xfa2 <vfprintf+0x39a>
     dd2:	84 36       	cpi	r24, 0x64	; 100
     dd4:	11 f0       	breq	.+4      	; 0xdda <vfprintf+0x1d2>
     dd6:	89 36       	cpi	r24, 0x69	; 105
     dd8:	41 f5       	brne	.+80     	; 0xe2a <vfprintf+0x222>
     dda:	f8 01       	movw	r30, r16
     ddc:	37 fe       	sbrs	r3, 7
     dde:	07 c0       	rjmp	.+14     	; 0xdee <vfprintf+0x1e6>
     de0:	60 81       	ld	r22, Z
     de2:	71 81       	ldd	r23, Z+1	; 0x01
     de4:	82 81       	ldd	r24, Z+2	; 0x02
     de6:	93 81       	ldd	r25, Z+3	; 0x03
     de8:	0c 5f       	subi	r16, 0xFC	; 252
     dea:	1f 4f       	sbci	r17, 0xFF	; 255
     dec:	08 c0       	rjmp	.+16     	; 0xdfe <vfprintf+0x1f6>
     dee:	60 81       	ld	r22, Z
     df0:	71 81       	ldd	r23, Z+1	; 0x01
     df2:	07 2e       	mov	r0, r23
     df4:	00 0c       	add	r0, r0
     df6:	88 0b       	sbc	r24, r24
     df8:	99 0b       	sbc	r25, r25
     dfa:	0e 5f       	subi	r16, 0xFE	; 254
     dfc:	1f 4f       	sbci	r17, 0xFF	; 255
     dfe:	f3 2d       	mov	r31, r3
     e00:	ff 76       	andi	r31, 0x6F	; 111
     e02:	3f 2e       	mov	r3, r31
     e04:	97 ff       	sbrs	r25, 7
     e06:	09 c0       	rjmp	.+18     	; 0xe1a <vfprintf+0x212>
     e08:	90 95       	com	r25
     e0a:	80 95       	com	r24
     e0c:	70 95       	com	r23
     e0e:	61 95       	neg	r22
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	8f 4f       	sbci	r24, 0xFF	; 255
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	f0 68       	ori	r31, 0x80	; 128
     e18:	3f 2e       	mov	r3, r31
     e1a:	2a e0       	ldi	r18, 0x0A	; 10
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	a3 01       	movw	r20, r6
     e20:	0e 94 47 08 	call	0x108e	; 0x108e <__ultoa_invert>
     e24:	88 2e       	mov	r8, r24
     e26:	86 18       	sub	r8, r6
     e28:	45 c0       	rjmp	.+138    	; 0xeb4 <vfprintf+0x2ac>
     e2a:	85 37       	cpi	r24, 0x75	; 117
     e2c:	31 f4       	brne	.+12     	; 0xe3a <vfprintf+0x232>
     e2e:	23 2d       	mov	r18, r3
     e30:	2f 7e       	andi	r18, 0xEF	; 239
     e32:	b2 2e       	mov	r11, r18
     e34:	2a e0       	ldi	r18, 0x0A	; 10
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	25 c0       	rjmp	.+74     	; 0xe84 <vfprintf+0x27c>
     e3a:	93 2d       	mov	r25, r3
     e3c:	99 7f       	andi	r25, 0xF9	; 249
     e3e:	b9 2e       	mov	r11, r25
     e40:	8f 36       	cpi	r24, 0x6F	; 111
     e42:	c1 f0       	breq	.+48     	; 0xe74 <vfprintf+0x26c>
     e44:	18 f4       	brcc	.+6      	; 0xe4c <vfprintf+0x244>
     e46:	88 35       	cpi	r24, 0x58	; 88
     e48:	79 f0       	breq	.+30     	; 0xe68 <vfprintf+0x260>
     e4a:	b5 c0       	rjmp	.+362    	; 0xfb6 <vfprintf+0x3ae>
     e4c:	80 37       	cpi	r24, 0x70	; 112
     e4e:	19 f0       	breq	.+6      	; 0xe56 <vfprintf+0x24e>
     e50:	88 37       	cpi	r24, 0x78	; 120
     e52:	21 f0       	breq	.+8      	; 0xe5c <vfprintf+0x254>
     e54:	b0 c0       	rjmp	.+352    	; 0xfb6 <vfprintf+0x3ae>
     e56:	e9 2f       	mov	r30, r25
     e58:	e0 61       	ori	r30, 0x10	; 16
     e5a:	be 2e       	mov	r11, r30
     e5c:	b4 fe       	sbrs	r11, 4
     e5e:	0d c0       	rjmp	.+26     	; 0xe7a <vfprintf+0x272>
     e60:	fb 2d       	mov	r31, r11
     e62:	f4 60       	ori	r31, 0x04	; 4
     e64:	bf 2e       	mov	r11, r31
     e66:	09 c0       	rjmp	.+18     	; 0xe7a <vfprintf+0x272>
     e68:	34 fe       	sbrs	r3, 4
     e6a:	0a c0       	rjmp	.+20     	; 0xe80 <vfprintf+0x278>
     e6c:	29 2f       	mov	r18, r25
     e6e:	26 60       	ori	r18, 0x06	; 6
     e70:	b2 2e       	mov	r11, r18
     e72:	06 c0       	rjmp	.+12     	; 0xe80 <vfprintf+0x278>
     e74:	28 e0       	ldi	r18, 0x08	; 8
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	05 c0       	rjmp	.+10     	; 0xe84 <vfprintf+0x27c>
     e7a:	20 e1       	ldi	r18, 0x10	; 16
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <vfprintf+0x27c>
     e80:	20 e1       	ldi	r18, 0x10	; 16
     e82:	32 e0       	ldi	r19, 0x02	; 2
     e84:	f8 01       	movw	r30, r16
     e86:	b7 fe       	sbrs	r11, 7
     e88:	07 c0       	rjmp	.+14     	; 0xe98 <vfprintf+0x290>
     e8a:	60 81       	ld	r22, Z
     e8c:	71 81       	ldd	r23, Z+1	; 0x01
     e8e:	82 81       	ldd	r24, Z+2	; 0x02
     e90:	93 81       	ldd	r25, Z+3	; 0x03
     e92:	0c 5f       	subi	r16, 0xFC	; 252
     e94:	1f 4f       	sbci	r17, 0xFF	; 255
     e96:	06 c0       	rjmp	.+12     	; 0xea4 <vfprintf+0x29c>
     e98:	60 81       	ld	r22, Z
     e9a:	71 81       	ldd	r23, Z+1	; 0x01
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 5f       	subi	r16, 0xFE	; 254
     ea2:	1f 4f       	sbci	r17, 0xFF	; 255
     ea4:	a3 01       	movw	r20, r6
     ea6:	0e 94 47 08 	call	0x108e	; 0x108e <__ultoa_invert>
     eaa:	88 2e       	mov	r8, r24
     eac:	86 18       	sub	r8, r6
     eae:	fb 2d       	mov	r31, r11
     eb0:	ff 77       	andi	r31, 0x7F	; 127
     eb2:	3f 2e       	mov	r3, r31
     eb4:	36 fe       	sbrs	r3, 6
     eb6:	0d c0       	rjmp	.+26     	; 0xed2 <vfprintf+0x2ca>
     eb8:	23 2d       	mov	r18, r3
     eba:	2e 7f       	andi	r18, 0xFE	; 254
     ebc:	a2 2e       	mov	r10, r18
     ebe:	89 14       	cp	r8, r9
     ec0:	58 f4       	brcc	.+22     	; 0xed8 <vfprintf+0x2d0>
     ec2:	34 fe       	sbrs	r3, 4
     ec4:	0b c0       	rjmp	.+22     	; 0xedc <vfprintf+0x2d4>
     ec6:	32 fc       	sbrc	r3, 2
     ec8:	09 c0       	rjmp	.+18     	; 0xedc <vfprintf+0x2d4>
     eca:	83 2d       	mov	r24, r3
     ecc:	8e 7e       	andi	r24, 0xEE	; 238
     ece:	a8 2e       	mov	r10, r24
     ed0:	05 c0       	rjmp	.+10     	; 0xedc <vfprintf+0x2d4>
     ed2:	b8 2c       	mov	r11, r8
     ed4:	a3 2c       	mov	r10, r3
     ed6:	03 c0       	rjmp	.+6      	; 0xede <vfprintf+0x2d6>
     ed8:	b8 2c       	mov	r11, r8
     eda:	01 c0       	rjmp	.+2      	; 0xede <vfprintf+0x2d6>
     edc:	b9 2c       	mov	r11, r9
     ede:	a4 fe       	sbrs	r10, 4
     ee0:	0f c0       	rjmp	.+30     	; 0xf00 <vfprintf+0x2f8>
     ee2:	fe 01       	movw	r30, r28
     ee4:	e8 0d       	add	r30, r8
     ee6:	f1 1d       	adc	r31, r1
     ee8:	80 81       	ld	r24, Z
     eea:	80 33       	cpi	r24, 0x30	; 48
     eec:	21 f4       	brne	.+8      	; 0xef6 <vfprintf+0x2ee>
     eee:	9a 2d       	mov	r25, r10
     ef0:	99 7e       	andi	r25, 0xE9	; 233
     ef2:	a9 2e       	mov	r10, r25
     ef4:	09 c0       	rjmp	.+18     	; 0xf08 <vfprintf+0x300>
     ef6:	a2 fe       	sbrs	r10, 2
     ef8:	06 c0       	rjmp	.+12     	; 0xf06 <vfprintf+0x2fe>
     efa:	b3 94       	inc	r11
     efc:	b3 94       	inc	r11
     efe:	04 c0       	rjmp	.+8      	; 0xf08 <vfprintf+0x300>
     f00:	8a 2d       	mov	r24, r10
     f02:	86 78       	andi	r24, 0x86	; 134
     f04:	09 f0       	breq	.+2      	; 0xf08 <vfprintf+0x300>
     f06:	b3 94       	inc	r11
     f08:	a3 fc       	sbrc	r10, 3
     f0a:	11 c0       	rjmp	.+34     	; 0xf2e <vfprintf+0x326>
     f0c:	a0 fe       	sbrs	r10, 0
     f0e:	06 c0       	rjmp	.+12     	; 0xf1c <vfprintf+0x314>
     f10:	b2 14       	cp	r11, r2
     f12:	88 f4       	brcc	.+34     	; 0xf36 <vfprintf+0x32e>
     f14:	28 0c       	add	r2, r8
     f16:	92 2c       	mov	r9, r2
     f18:	9b 18       	sub	r9, r11
     f1a:	0e c0       	rjmp	.+28     	; 0xf38 <vfprintf+0x330>
     f1c:	b2 14       	cp	r11, r2
     f1e:	60 f4       	brcc	.+24     	; 0xf38 <vfprintf+0x330>
     f20:	b6 01       	movw	r22, r12
     f22:	80 e2       	ldi	r24, 0x20	; 32
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 0b 08 	call	0x1016	; 0x1016 <fputc>
     f2a:	b3 94       	inc	r11
     f2c:	f7 cf       	rjmp	.-18     	; 0xf1c <vfprintf+0x314>
     f2e:	b2 14       	cp	r11, r2
     f30:	18 f4       	brcc	.+6      	; 0xf38 <vfprintf+0x330>
     f32:	2b 18       	sub	r2, r11
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <vfprintf+0x332>
     f36:	98 2c       	mov	r9, r8
     f38:	21 2c       	mov	r2, r1
     f3a:	a4 fe       	sbrs	r10, 4
     f3c:	10 c0       	rjmp	.+32     	; 0xf5e <vfprintf+0x356>
     f3e:	b6 01       	movw	r22, r12
     f40:	80 e3       	ldi	r24, 0x30	; 48
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 0b 08 	call	0x1016	; 0x1016 <fputc>
     f48:	a2 fe       	sbrs	r10, 2
     f4a:	17 c0       	rjmp	.+46     	; 0xf7a <vfprintf+0x372>
     f4c:	a1 fc       	sbrc	r10, 1
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <vfprintf+0x34e>
     f50:	88 e7       	ldi	r24, 0x78	; 120
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <vfprintf+0x352>
     f56:	88 e5       	ldi	r24, 0x58	; 88
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	b6 01       	movw	r22, r12
     f5c:	0c c0       	rjmp	.+24     	; 0xf76 <vfprintf+0x36e>
     f5e:	8a 2d       	mov	r24, r10
     f60:	86 78       	andi	r24, 0x86	; 134
     f62:	59 f0       	breq	.+22     	; 0xf7a <vfprintf+0x372>
     f64:	a1 fe       	sbrs	r10, 1
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <vfprintf+0x364>
     f68:	8b e2       	ldi	r24, 0x2B	; 43
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <vfprintf+0x366>
     f6c:	80 e2       	ldi	r24, 0x20	; 32
     f6e:	a7 fc       	sbrc	r10, 7
     f70:	8d e2       	ldi	r24, 0x2D	; 45
     f72:	b6 01       	movw	r22, r12
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 0b 08 	call	0x1016	; 0x1016 <fputc>
     f7a:	89 14       	cp	r8, r9
     f7c:	38 f4       	brcc	.+14     	; 0xf8c <vfprintf+0x384>
     f7e:	b6 01       	movw	r22, r12
     f80:	80 e3       	ldi	r24, 0x30	; 48
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 0b 08 	call	0x1016	; 0x1016 <fputc>
     f88:	9a 94       	dec	r9
     f8a:	f7 cf       	rjmp	.-18     	; 0xf7a <vfprintf+0x372>
     f8c:	8a 94       	dec	r8
     f8e:	f3 01       	movw	r30, r6
     f90:	e8 0d       	add	r30, r8
     f92:	f1 1d       	adc	r31, r1
     f94:	80 81       	ld	r24, Z
     f96:	b6 01       	movw	r22, r12
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 0b 08 	call	0x1016	; 0x1016 <fputc>
     f9e:	81 10       	cpse	r8, r1
     fa0:	f5 cf       	rjmp	.-22     	; 0xf8c <vfprintf+0x384>
     fa2:	22 20       	and	r2, r2
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <vfprintf+0x3a0>
     fa6:	42 ce       	rjmp	.-892    	; 0xc2c <vfprintf+0x24>
     fa8:	b6 01       	movw	r22, r12
     faa:	80 e2       	ldi	r24, 0x20	; 32
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 0b 08 	call	0x1016	; 0x1016 <fputc>
     fb2:	2a 94       	dec	r2
     fb4:	f6 cf       	rjmp	.-20     	; 0xfa2 <vfprintf+0x39a>
     fb6:	f6 01       	movw	r30, r12
     fb8:	86 81       	ldd	r24, Z+6	; 0x06
     fba:	97 81       	ldd	r25, Z+7	; 0x07
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <vfprintf+0x3ba>
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	9f ef       	ldi	r25, 0xFF	; 255
     fc2:	2b 96       	adiw	r28, 0x0b	; 11
     fc4:	e2 e1       	ldi	r30, 0x12	; 18
     fc6:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__epilogue_restores__>

00000fca <strnlen_P>:
     fca:	fc 01       	movw	r30, r24
     fcc:	05 90       	lpm	r0, Z+
     fce:	61 50       	subi	r22, 0x01	; 1
     fd0:	70 40       	sbci	r23, 0x00	; 0
     fd2:	01 10       	cpse	r0, r1
     fd4:	d8 f7       	brcc	.-10     	; 0xfcc <strnlen_P+0x2>
     fd6:	80 95       	com	r24
     fd8:	90 95       	com	r25
     fda:	8e 0f       	add	r24, r30
     fdc:	9f 1f       	adc	r25, r31
     fde:	08 95       	ret

00000fe0 <strnlen>:
     fe0:	fc 01       	movw	r30, r24
     fe2:	61 50       	subi	r22, 0x01	; 1
     fe4:	70 40       	sbci	r23, 0x00	; 0
     fe6:	01 90       	ld	r0, Z+
     fe8:	01 10       	cpse	r0, r1
     fea:	d8 f7       	brcc	.-10     	; 0xfe2 <strnlen+0x2>
     fec:	80 95       	com	r24
     fee:	90 95       	com	r25
     ff0:	8e 0f       	add	r24, r30
     ff2:	9f 1f       	adc	r25, r31
     ff4:	08 95       	ret

00000ff6 <strrev>:
     ff6:	dc 01       	movw	r26, r24
     ff8:	fc 01       	movw	r30, r24
     ffa:	67 2f       	mov	r22, r23
     ffc:	71 91       	ld	r23, Z+
     ffe:	77 23       	and	r23, r23
    1000:	e1 f7       	brne	.-8      	; 0xffa <strrev+0x4>
    1002:	32 97       	sbiw	r30, 0x02	; 2
    1004:	04 c0       	rjmp	.+8      	; 0x100e <strrev+0x18>
    1006:	7c 91       	ld	r23, X
    1008:	6d 93       	st	X+, r22
    100a:	70 83       	st	Z, r23
    100c:	62 91       	ld	r22, -Z
    100e:	ae 17       	cp	r26, r30
    1010:	bf 07       	cpc	r27, r31
    1012:	c8 f3       	brcs	.-14     	; 0x1006 <strrev+0x10>
    1014:	08 95       	ret

00001016 <fputc>:
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	fb 01       	movw	r30, r22
    1020:	23 81       	ldd	r18, Z+3	; 0x03
    1022:	21 fd       	sbrc	r18, 1
    1024:	03 c0       	rjmp	.+6      	; 0x102c <fputc+0x16>
    1026:	8f ef       	ldi	r24, 0xFF	; 255
    1028:	9f ef       	ldi	r25, 0xFF	; 255
    102a:	2c c0       	rjmp	.+88     	; 0x1084 <fputc+0x6e>
    102c:	22 ff       	sbrs	r18, 2
    102e:	16 c0       	rjmp	.+44     	; 0x105c <fputc+0x46>
    1030:	46 81       	ldd	r20, Z+6	; 0x06
    1032:	57 81       	ldd	r21, Z+7	; 0x07
    1034:	24 81       	ldd	r18, Z+4	; 0x04
    1036:	35 81       	ldd	r19, Z+5	; 0x05
    1038:	42 17       	cp	r20, r18
    103a:	53 07       	cpc	r21, r19
    103c:	44 f4       	brge	.+16     	; 0x104e <fputc+0x38>
    103e:	a0 81       	ld	r26, Z
    1040:	b1 81       	ldd	r27, Z+1	; 0x01
    1042:	9d 01       	movw	r18, r26
    1044:	2f 5f       	subi	r18, 0xFF	; 255
    1046:	3f 4f       	sbci	r19, 0xFF	; 255
    1048:	31 83       	std	Z+1, r19	; 0x01
    104a:	20 83       	st	Z, r18
    104c:	8c 93       	st	X, r24
    104e:	26 81       	ldd	r18, Z+6	; 0x06
    1050:	37 81       	ldd	r19, Z+7	; 0x07
    1052:	2f 5f       	subi	r18, 0xFF	; 255
    1054:	3f 4f       	sbci	r19, 0xFF	; 255
    1056:	37 83       	std	Z+7, r19	; 0x07
    1058:	26 83       	std	Z+6, r18	; 0x06
    105a:	14 c0       	rjmp	.+40     	; 0x1084 <fputc+0x6e>
    105c:	8b 01       	movw	r16, r22
    105e:	ec 01       	movw	r28, r24
    1060:	fb 01       	movw	r30, r22
    1062:	00 84       	ldd	r0, Z+8	; 0x08
    1064:	f1 85       	ldd	r31, Z+9	; 0x09
    1066:	e0 2d       	mov	r30, r0
    1068:	09 95       	icall
    106a:	89 2b       	or	r24, r25
    106c:	e1 f6       	brne	.-72     	; 0x1026 <fputc+0x10>
    106e:	d8 01       	movw	r26, r16
    1070:	16 96       	adiw	r26, 0x06	; 6
    1072:	8d 91       	ld	r24, X+
    1074:	9c 91       	ld	r25, X
    1076:	17 97       	sbiw	r26, 0x07	; 7
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	17 96       	adiw	r26, 0x07	; 7
    107c:	9c 93       	st	X, r25
    107e:	8e 93       	st	-X, r24
    1080:	16 97       	sbiw	r26, 0x06	; 6
    1082:	ce 01       	movw	r24, r28
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	08 95       	ret

0000108e <__ultoa_invert>:
    108e:	fa 01       	movw	r30, r20
    1090:	aa 27       	eor	r26, r26
    1092:	28 30       	cpi	r18, 0x08	; 8
    1094:	51 f1       	breq	.+84     	; 0x10ea <__ultoa_invert+0x5c>
    1096:	20 31       	cpi	r18, 0x10	; 16
    1098:	81 f1       	breq	.+96     	; 0x10fa <__ultoa_invert+0x6c>
    109a:	e8 94       	clt
    109c:	6f 93       	push	r22
    109e:	6e 7f       	andi	r22, 0xFE	; 254
    10a0:	6e 5f       	subi	r22, 0xFE	; 254
    10a2:	7f 4f       	sbci	r23, 0xFF	; 255
    10a4:	8f 4f       	sbci	r24, 0xFF	; 255
    10a6:	9f 4f       	sbci	r25, 0xFF	; 255
    10a8:	af 4f       	sbci	r26, 0xFF	; 255
    10aa:	b1 e0       	ldi	r27, 0x01	; 1
    10ac:	3e d0       	rcall	.+124    	; 0x112a <__ultoa_invert+0x9c>
    10ae:	b4 e0       	ldi	r27, 0x04	; 4
    10b0:	3c d0       	rcall	.+120    	; 0x112a <__ultoa_invert+0x9c>
    10b2:	67 0f       	add	r22, r23
    10b4:	78 1f       	adc	r23, r24
    10b6:	89 1f       	adc	r24, r25
    10b8:	9a 1f       	adc	r25, r26
    10ba:	a1 1d       	adc	r26, r1
    10bc:	68 0f       	add	r22, r24
    10be:	79 1f       	adc	r23, r25
    10c0:	8a 1f       	adc	r24, r26
    10c2:	91 1d       	adc	r25, r1
    10c4:	a1 1d       	adc	r26, r1
    10c6:	6a 0f       	add	r22, r26
    10c8:	71 1d       	adc	r23, r1
    10ca:	81 1d       	adc	r24, r1
    10cc:	91 1d       	adc	r25, r1
    10ce:	a1 1d       	adc	r26, r1
    10d0:	20 d0       	rcall	.+64     	; 0x1112 <__ultoa_invert+0x84>
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <__ultoa_invert+0x48>
    10d4:	68 94       	set
    10d6:	3f 91       	pop	r19
    10d8:	2a e0       	ldi	r18, 0x0A	; 10
    10da:	26 9f       	mul	r18, r22
    10dc:	11 24       	eor	r1, r1
    10de:	30 19       	sub	r19, r0
    10e0:	30 5d       	subi	r19, 0xD0	; 208
    10e2:	31 93       	st	Z+, r19
    10e4:	de f6       	brtc	.-74     	; 0x109c <__ultoa_invert+0xe>
    10e6:	cf 01       	movw	r24, r30
    10e8:	08 95       	ret
    10ea:	46 2f       	mov	r20, r22
    10ec:	47 70       	andi	r20, 0x07	; 7
    10ee:	40 5d       	subi	r20, 0xD0	; 208
    10f0:	41 93       	st	Z+, r20
    10f2:	b3 e0       	ldi	r27, 0x03	; 3
    10f4:	0f d0       	rcall	.+30     	; 0x1114 <__ultoa_invert+0x86>
    10f6:	c9 f7       	brne	.-14     	; 0x10ea <__ultoa_invert+0x5c>
    10f8:	f6 cf       	rjmp	.-20     	; 0x10e6 <__ultoa_invert+0x58>
    10fa:	46 2f       	mov	r20, r22
    10fc:	4f 70       	andi	r20, 0x0F	; 15
    10fe:	40 5d       	subi	r20, 0xD0	; 208
    1100:	4a 33       	cpi	r20, 0x3A	; 58
    1102:	18 f0       	brcs	.+6      	; 0x110a <__ultoa_invert+0x7c>
    1104:	49 5d       	subi	r20, 0xD9	; 217
    1106:	31 fd       	sbrc	r19, 1
    1108:	40 52       	subi	r20, 0x20	; 32
    110a:	41 93       	st	Z+, r20
    110c:	02 d0       	rcall	.+4      	; 0x1112 <__ultoa_invert+0x84>
    110e:	a9 f7       	brne	.-22     	; 0x10fa <__ultoa_invert+0x6c>
    1110:	ea cf       	rjmp	.-44     	; 0x10e6 <__ultoa_invert+0x58>
    1112:	b4 e0       	ldi	r27, 0x04	; 4
    1114:	a6 95       	lsr	r26
    1116:	97 95       	ror	r25
    1118:	87 95       	ror	r24
    111a:	77 95       	ror	r23
    111c:	67 95       	ror	r22
    111e:	ba 95       	dec	r27
    1120:	c9 f7       	brne	.-14     	; 0x1114 <__ultoa_invert+0x86>
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	61 05       	cpc	r22, r1
    1126:	71 05       	cpc	r23, r1
    1128:	08 95       	ret
    112a:	9b 01       	movw	r18, r22
    112c:	ac 01       	movw	r20, r24
    112e:	0a 2e       	mov	r0, r26
    1130:	06 94       	lsr	r0
    1132:	57 95       	ror	r21
    1134:	47 95       	ror	r20
    1136:	37 95       	ror	r19
    1138:	27 95       	ror	r18
    113a:	ba 95       	dec	r27
    113c:	c9 f7       	brne	.-14     	; 0x1130 <__ultoa_invert+0xa2>
    113e:	62 0f       	add	r22, r18
    1140:	73 1f       	adc	r23, r19
    1142:	84 1f       	adc	r24, r20
    1144:	95 1f       	adc	r25, r21
    1146:	a0 1d       	adc	r26, r0
    1148:	08 95       	ret

0000114a <__prologue_saves__>:
    114a:	2f 92       	push	r2
    114c:	3f 92       	push	r3
    114e:	4f 92       	push	r4
    1150:	5f 92       	push	r5
    1152:	6f 92       	push	r6
    1154:	7f 92       	push	r7
    1156:	8f 92       	push	r8
    1158:	9f 92       	push	r9
    115a:	af 92       	push	r10
    115c:	bf 92       	push	r11
    115e:	cf 92       	push	r12
    1160:	df 92       	push	r13
    1162:	ef 92       	push	r14
    1164:	ff 92       	push	r15
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	ca 1b       	sub	r28, r26
    1174:	db 0b       	sbc	r29, r27
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	09 94       	ijmp

00001182 <__epilogue_restores__>:
    1182:	2a 88       	ldd	r2, Y+18	; 0x12
    1184:	39 88       	ldd	r3, Y+17	; 0x11
    1186:	48 88       	ldd	r4, Y+16	; 0x10
    1188:	5f 84       	ldd	r5, Y+15	; 0x0f
    118a:	6e 84       	ldd	r6, Y+14	; 0x0e
    118c:	7d 84       	ldd	r7, Y+13	; 0x0d
    118e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1190:	9b 84       	ldd	r9, Y+11	; 0x0b
    1192:	aa 84       	ldd	r10, Y+10	; 0x0a
    1194:	b9 84       	ldd	r11, Y+9	; 0x09
    1196:	c8 84       	ldd	r12, Y+8	; 0x08
    1198:	df 80       	ldd	r13, Y+7	; 0x07
    119a:	ee 80       	ldd	r14, Y+6	; 0x06
    119c:	fd 80       	ldd	r15, Y+5	; 0x05
    119e:	0c 81       	ldd	r16, Y+4	; 0x04
    11a0:	1b 81       	ldd	r17, Y+3	; 0x03
    11a2:	aa 81       	ldd	r26, Y+2	; 0x02
    11a4:	b9 81       	ldd	r27, Y+1	; 0x01
    11a6:	ce 0f       	add	r28, r30
    11a8:	d1 1d       	adc	r29, r1
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	ed 01       	movw	r28, r26
    11b6:	08 95       	ret

000011b8 <_exit>:
    11b8:	f8 94       	cli

000011ba <__stop_program>:
    11ba:	ff cf       	rjmp	.-2      	; 0x11ba <__stop_program>
